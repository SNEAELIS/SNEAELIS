<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Projeto Técnico Pedagógico</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.development.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.development.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.22.9/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div id="root"></div>
    <script type="text/babel">
const { useState, useEffect } = React;

// Funções utilitárias
const formatarCNPJ = (cnpj) => {
    cnpj = cnpj.replace(/\D/g, '');
    if (cnpj.length === 14) {
        return cnpj.replace(/^(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})$/, '$1.$2.$3/$4-$5');
    }
    return cnpj;
};

const formatarTelefone = (telefone) => {
    telefone = telefone.replace(/\D/g, '');
    if (telefone.length === 11) return telefone.replace(/^(\d{2})(\d{5})(\d{4})$/, '($1) $2-$3');
    if (telefone.length === 10) return telefone.replace(/^(\d{2})(\d{4})(\d{4})$/, '($1) $2-$3');
    return telefone;
};

const numeroPorExtenso = (num) => {
    const unidades = ['zero', 'um', 'dois', 'três', 'quatro', 'cinco', 'seis', 'sete', 'oito', 'nove'];
    const dezenas = ['dez', 'vinte', 'trinta', 'quarenta', 'cinquenta', 'sessenta', 'setenta', 'oitenta', 'noventa'];
    const especiais = ['onze', 'doze', 'treze', 'quatorze', 'quinze', 'dezesseis', 'dezessete', 'dezoito', 'dezenove'];

    num = parseInt(num);
    if (isNaN(num)) return 'XX';
    if (num < 10) return unidades[num];
    if (num >= 11 && num <= 19) return especiais[num - 11];
    if (num < 100) {
        const dezena = Math.floor(num / 10);
        const unidade = num % 10;
        return unidade === 0 ? dezenas[dezena - 1] : `${dezenas[dezena - 1]} e ${unidades[unidade]}`;
    }
    return num.toString();
};

const formatarMoeda = (valor) => {
    if (!valor || isNaN(parseFloat(valor))) return 'R$ 0,00';
    return `R$ ${parseFloat(valor).toFixed(2).replace('.', ',').replace(/(\d)(?=(\d{3})+\,)/g, '$1.')}`;
};

const parseMoeda = (valor) => {
    if (!valor) return 0;
    return parseFloat(valor.replace(/[^\d,]/g, '').replace(',', '.')) || 0;
};

// Componente Principal
const App = () => {
    const [activeTab, setActiveTab] = useState('info-proponente');
    const [formData, setFormData] = useState({
        proponente: {
            cnpj: '',
            nomeProponente: '',
            nomeDirigente: '',
            telefones: [''],
            email: '',
            numeroProposta: '',
            responsavelNome: '',
            responsavelEmail: '',
            responsavelVinculo: '',
            responsavelTelefones: [''],
            dimensaoProjeto: '',
            uf: '',
            cidade: '',
            idh: '',
            anoIDH: '',
            numHabitantes: '',
            anoHabitantes: '',
            temParceria: '',
            numParcerias: '',
            temPublicidade: '',
            publicidadeSite: '',
            artigo2: '',
            artigo33I: '',
            artigo33III: ''
        },
        dadosProjeto: {
            objetoProjeto: '',
            publicoAlvo: [],
            quantidadeNucleos: '',
            publicoDireto: '',
            faixaEtaria: '',
            publicoIndireto: '',
            periodoEstruturacao: '',
            periodoExecucao: '',
            vigenciaTotal: '',
            localidadeNucleos: '',
            modalidades: [{ modalidade: '' }],
            valorConcedente: '',
            valorContrapartida: '',
            valorGlobal: ''
        },
        infoProjeto: {
            tipoNucleo: '',
            identificacao: [],
            outrosIdentificacao: '',
            divulgacao: [],
            outrosDivulgacao: '',
            custeioDivulgacao: '',
            quantidadeConjuntosUniforme: '',
            gradeHoraria: [{
                nucleoLocalidade: '',
                modalidadesNucleo: '',
                rhNucleo: '',
                infoNucleo: '',
                gradeHorariaDescricao: ''
            }],
            recursosHumanos: [{
                funcaoRH: '',
                quantidadeRH: '',
                atribuicaoRH: '',
                cargaHorariaRH: '',
                periodoRH: '',
                tipoRH: ''
            }],
            materiais: [{
                modalidadeMaterial: '',
                material: '',
                tipoAquisicao: 'Aquisição',
                especificacaoMaterial: '',
                justificativaMaterial: ''
            }],
            uniformes: [{
                modalidadeUniforme: '',
                itemUniforme: '',
                especificacaoUniforme: ''
            }],
            eventosSelecionados: [], // Adicione esta linha
                    abrangenciaEventos: '',
                    detalhamentoModalidades: 'Espaço destinado para a Entidade relatar detalhes específicos sobre as modalidades que serão oferecidas neste projeto, visando conectar o projeto à realidade da Instituição e dos objetivos que se pretende alcançar, tais como: desenvolvimento, características, habilidades, materiais, estrutura, vantagens, benefícios, etc.',
                    acompanhamento: 'As aulas ministradas serão registradas em Planos de Aula aprovados pela coordenação geral, registros fotográficos, relatórios emitidos pelo educador/instrutor. Tendo em vista a intencionalidade pedagógica da prática desportiva neste Projeto Técnico. Será emitido parecer, trimestralmente, dos profissionais que acompanharão as turmas sobre a evolução de aspectos pedagógicos e sociais, além de interação social e compreensão da importância de práticas esportivas para a saúde.',
                    conclusao: 'O Projeto busca não apenas o desenvolvimento atlético, mas também o crescimento pessoal e social dos participantes. Ao utilizar o esporte como ferramenta, o projeto contribui para um futuro mais justo e cheio de oportunidades, proporcionando aos beneficiários em situação de vulnerabilidade uma chance de transformar suas vidas.'

        }
    });
    const [municipios, setMunicipios] = useState([]);
    const [isCNPJEditable, setIsCNPJEditable] = useState(true);
    const [isNomeDirigenteEditable, setIsNomeDirigenteEditable] = useState(false);
    const [formularioValido, setFormularioValido] = useState(false);

    // Lista de campos obrigatórios
    const camposObrigatorios = {
        proponente: [
            'cnpj',
            'nomeProponente',
            'nomeDirigente',
            'telefones',
            'email',
            'numeroProposta',
            'responsavelNome',
            'responsavelEmail',
            'responsavelVinculo',
            'responsavelTelefones',
            'dimensaoProjeto',
            'uf',
            'cidade',
            'numHabitantes',
            'anoHabitantes',
            'temParceria',
            'temPublicidade',
            'artigo2',
            'artigo33I',
            'artigo33III'
        ],
        dadosProjeto: [
            'objetoProjeto',
            'publicoAlvo',
            'quantidadeNucleos',
            'publicoDireto',
            'faixaEtaria',
            'periodoEstruturacao',
            'periodoExecucao',
            'localidadeNucleos',
            'modalidades',
            'valorConcedente',
            'valorContrapartida'
        ],
        infoProjeto: [
            'tipoNucleo',
            'identificacao',
            'divulgacao',
            'custeioDivulgacao',
            'quantidadeConjuntosUniforme',
            'gradeHoraria',
            'recursosHumanos',
            'materiais',
            'uniformes',
            'detalhamentoModalidades'
        ]
    };

    // Função de validação
    const validarFormulario = () => {
        const { proponente, dadosProjeto, infoProjeto } = formData;

        // Função auxiliar para verificar se um campo está preenchido
        const isFilled = (value) => {
            if (Array.isArray(value)) {
                return value.length > 0 && value.every(item => {
                    if (typeof item === 'object') {
                        return Object.values(item).every(v => isFilled(v));
                    }
                    return v !== '' && v !== null && v !== undefined;
                });
            }
            return value !== '' && value !== null && value !== undefined;
        };

        // Verifica cada seção
        for (const secao of Object.keys(camposObrigatorios)) {
            for (const campo of camposObrigatorios[secao]) {
                const valor = formData[secao][campo];

                // Verifica se o campo está preenchido
                if (!isFilled(valor)) {
                    console.log(`Campo obrigatório não preenchido: ${secao}.${campo}`);
                    return false;
                }

                // Validações específicas para alguns campos
                if (secao === 'proponente') {
                    if (campo === 'cnpj' && valor.replace(/\D/g, '').length !== 14) {
                        return false; // CNPJ inválido
                    }
                    if (campo === 'email' && !valor.includes('@')) {
                        return false; // Email inválido
                    }
                    if (campo === 'temParceria' && valor === 'sim' && !isFilled(proponente.numParcerias)) {
                        return false; // numParcerias obrigatório se temParceria for 'sim'
                    }
                    if (campo === 'temPublicidade' && valor === 'sim' && !isFilled(proponente.publicidadeSite)) {
                        return false; // publicidadeSite obrigatório se temPublicidade for 'sim'
                    }
                }
                if (secao === 'dadosProjeto') {
                    if (campo === 'valorConcedente' && parseMoeda(valor) <= 0) {
                        return false; // Valor concedente inválido
                    }
                    if (campo === 'publicoDireto' && parseInt(valor) <= 0) {
                        return false; // Público direto inválido
                    }
                    if (campo === 'modalidades') {
                        return valor.every(mod => isFilled(mod.modalidade));
                    }
                }
                if (secao === 'infoProjeto') {
                    if (campo === 'gradeHoraria') {
                        return valor.every(row => isFilled(row.nucleoLocalidade) && isFilled(row.modalidadesNucleo) && isFilled(row.gradeHorariaDescricao));
                    }
                    if (campo === 'recursosHumanos') {
                        return valor.every(row => isFilled(row.funcaoRH) && isFilled(row.quantidadeRH) && isFilled(row.atribuicaoRH) && isFilled(row.cargaHorariaRH) && isFilled(row.periodoRH));
                    }
                    if (campo === 'materiais') {
                        return valor.every(row => isFilled(row.modalidadeMaterial) && isFilled(row.material) && isFilled(row.especificacaoMaterial) && isFilled(row.justificativaMaterial));
                    }
                    if (campo === 'uniformes') {
                        return valor.every(row => isFilled(row.modalidadeUniforme) && isFilled(row.itemUniforme) && isFilled(row.especificacaoUniforme));
                    }
                }
            }
        }

        // eventosSelecionados é opcional, então não é verificado
        // abrangenciaEventos é exigido apenas se eventosSelecionados tiver valores
        if (infoProjeto.eventosSelecionados?.length > 0 && !isFilled(infoProjeto.abrangenciaEventos)) {
            console.log('abrangenciaEventos é obrigatório quando eventosSelecionados está preenchido');
            return false;
        }

        return true; // Todos os campos obrigatórios estão preenchidos
    };

    useEffect(() => {
        setFormularioValido(validarFormulario());
    }, [formData]);

    useEffect(() => {
        loadSavedData();
    }, []);

    const loadSavedData = () => {
        const saved = localStorage.getItem('formData');
        if (saved) {
            const parsed = JSON.parse(saved);
            setFormData(parsed);
            if (parsed.proponente.uf) carregarMunicipios(parsed.proponente.uf);
            if (parsed.proponente.cidade) preencherMunicipio(parsed.proponente.cidade);
        }
    };

    const saveForm = (section) => {
        const updatedData = { ...formData, [section]: formData[section] };
        setFormData(updatedData);
        localStorage.setItem('formData', JSON.stringify(updatedData));
        alert('Dados salvos com sucesso!');
    };

    const handleInputChange = (section, field, value, index = null, subField = null) => {
        setFormData(prev => {
            const newData = { ...prev };
            if (index !== null && subField) {
                newData[section][field][index][subField] = value;
            } else if (index !== null) {
                newData[section][field][index] = value;
            } else {
                newData[section][field] = value;
            }
            return newData;
        });

        if (section === 'proponente') {
            if (field === 'cnpj') buscarDadosCNPJ(value);
            if (field === 'uf') carregarMunicipios(value);
            if (field === 'cidade') buscarDadosMunicipio(value);
        }
        if (section === 'dadosProjeto') {
            if (field === 'valorConcedente' || field === 'valorContrapartida') {
                calcularValorGlobal();
            }
            if (field === 'periodoEstruturacao' || field === 'periodoExecucao') {
                calcularVigenciaTotal();
            }
            if (field === 'publicoDireto') {
                calcularPublicoIndireto(value);
            }
        }
    };

    const addItem = (section, field) => {
        setFormData(prev => {
            const newData = { ...prev };
            const template = { modalidade: '' }; // Novo item com modalidade em branco
            newData[section][field] = [...prev[section][field], { ...template }];
            return newData;
        });
    };

    const removeItem = (section, field, index) => {
        if (formData[section][field].length > 1) {
            setFormData(prev => {
                const newData = { ...prev };
                newData[section][field] = prev[section][field].filter((_, i) => i !== index);
                return newData;
            });
        } else {
            alert('É necessário ter pelo menos uma linha.');
        }
    };

    // Cache para armazenar respostas da BrasilAPI
    const cnpjCache = {};

    const buscarDadosCNPJ = async (cnpj) => {
        // Remove caracteres não numéricos do CNPJ
        cnpj = cnpj.replace(/\D/g, '');

        // Só exibe a mensagem se o CNPJ tiver 12 ou 13 dígitos
        if (cnpj.length === 12 || cnpj.length === 13) {
            console.warn('CNPJ inválido:', cnpj);
            alert('Por favor, insira um CNPJ válido com 14 dígitos.');
            return;
        }

        // Se o CNPJ tiver 14 dígitos, prossegue com a busca
        if (cnpj.length === 14) {
            // Verifica se o CNPJ está no cache
            if (cnpjCache[cnpj]) {
                console.log('Usando dados do cache para CNPJ:', cnpj);
                processarDados(cnpjCache[cnpj]);
                return;
            }

            try {
                // Faz a requisição à BrasilAPI
                console.log('Buscando dados na BrasilAPI para CNPJ:', cnpj);
                const response = await fetch(`https://brasilapi.com.br/api/cnpj/v1/${cnpj}`);
                if (!response.ok) {
                    throw new Error(`Erro ${response.status}: ${response.statusText}`);
                }

                const data = await response.json();
                console.log('Dados retornados pela BrasilAPI:', data);

                // Armazena no cache
                cnpjCache[cnpj] = data;

                // Processa os dados
                processarDados(data);
            } catch (error) {
                console.error('Erro ao buscar dados do CNPJ:', error);
                alert(`Erro ao buscar dados do CNPJ: ${error.message}`);
                setIsCNPJEditable(true);
            }
        }
    };

    const processarDados = async (data) => {
        if (!data.erro) {
            const uf = data.uf || '';
            const municipio = data.municipio || '';

            // Atualiza o estado do formulário
            setFormData(prev => {
                const newState = {
                    ...prev,
                    proponente: {
                        ...prev.proponente,
                        nomeProponente: data.razao_social || '',
                        nomeDirigente: data.qsa?.find(q =>
                            q.qualificacao === '05-Administrador' ||
                            q.qualificacao === '49-Socio-Administrador'
                        )?.nome || '',
                        uf: uf
                    }
                };
                console.log('Novo estado do formData:', newState);
                return newState;
            });

            // Bloqueia a edição do CNPJ
            setIsCNPJEditable(false);

            // Carrega os municípios se UF estiver presente
            if (uf) {
                console.log('Carregando municípios para UF:', uf);
                try {
                    await carregarMunicipios(uf);
                } catch (error) {
                    console.error('Erro ao carregar municípios:', error);
                }
            } else {
                console.warn('UF não fornecida pela BrasilAPI:', data);
                setMunicipios([]);
            }

            // Preenche o município se disponível
            if (municipio) {
                console.log('Chamando preencherMunicipio com município:', municipio);
                try {
                    await preencherMunicipio(municipio);
                } catch (error) {
                    console.error('Erro ao preencher município:', error);
                }
            } else {
                console.warn('Município não fornecido pela BrasilAPI:', data);
                setFormData(prev => ({
                    ...prev,
                    proponente: { ...prev.proponente, cidade: '' }
                }));
            }
        } else {
            console.warn('CNPJ não encontrado na BrasilAPI:', data);
            alert('CNPJ não encontrado.');
            setIsCNPJEditable(true);
        }
    };

    const buscarDadosMunicipio = async (municipioId) => {
        if (!municipioId) {
            console.warn('ID do município não fornecido.');
            setFormData(prev => ({
                ...prev,
                proponente: {
                    ...prev.proponente,
                    numHabitantes: '',
                    anoHabitantes: '',
                    idh: '',
                    anoIDH: ''
                }
            }));
            return;
        }
        try {
            // Buscar dados populacionais
            const response = await fetch(`https://servicodados.ibge.gov.br/api/v3/agregados/6579/periodos/2021/variaveis/9324?localidades=N6[${municipioId}]`);
            if (!response.ok) {
                throw new Error(`Erro ${response.status}: ${response.statusText}`);
            }
            const data = await response.json();
            console.log('Dados populacionais retornados:', data);

            // Extrair população e ano de referência
            const populacao = data?.[0]?.resultados?.[0]?.series?.[0]?.serie?.['2021'] || '';
            const anoReferencia = '2021'; // Ano fixo baseado na API usada (ajuste conforme a fonte)

            // Atualizar formData com os dados populacionais
            setFormData(prev => ({
                ...prev,
                proponente: {
                    ...prev.proponente,
                    numHabitantes: populacao ? populacao.toString() : '',
                    anoHabitantes: anoReferencia
                }
            }));
        } catch (error) {
            console.error('Erro ao buscar dados do município:', error);
            alert('Erro ao buscar dados populacionais do município. Verifique a conexão ou tente novamente.');
            setFormData(prev => ({
                ...prev,
                proponente: {
                    ...prev.proponente,
                    numHabitantes: '',
                    anoHabitantes: ''
                }
            }));
        }
    };

    const carregarMunicipios = async (uf, retries = 3) => {
        if (!uf || !/^[A-Z]{2}$/.test(uf)) {
            console.warn(`UF inválida: "${uf}". Definindo municipios como vazio.`);
            setMunicipios([]);
            return [];
        }
        for (let attempt = 1; attempt <= retries; attempt++) {
            try {
                const response = await fetch(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${uf}/municipios`);
                if (!response.ok) {
                    throw new Error(`Erro ${response.status}: ${response.statusText}`);
                }
                const data = await response.json();
                console.log(`Municípios carregados para UF ${uf}:`, data);
                setMunicipios(data || []);
                return data || [];
            } catch (error) {
                console.error(`Tentativa ${attempt} falhou ao carregar municípios para UF ${uf}:`, error);
                if (attempt === retries) {
                    console.warn(`Não foi possível carregar municípios para UF ${uf}.`);
                    alert(`Não foi possível carregar os municípios para UF ${uf}. Verifique sua conexão ou tente novamente.`);
                    setMunicipios([]);
                    return [];
                }
            }
        }
    };

    const preencherMunicipio = async (nomeMunicipio) => {
        if (!nomeMunicipio) {
            console.warn('Nome do município não fornecido.');
            setFormData(prev => ({
                ...prev,
                proponente: { ...prev.proponente, cidade: '' }
            }));
            return;
        }

        // Verificar se nomeMunicipio é um ID (ex.: '1300102')
        if (/^\d+$/.test(nomeMunicipio)) {
            console.warn(`nomeMunicipio "${nomeMunicipio}" parece ser um ID, não um nome.`);
            
            setFormData(prev => ({
                ...prev,
                proponente: { ...prev.proponente, cidade: nomeMunicipio }
            }));

            if (formData.proponente.uf) {
                const lista = await carregarMunicipios(formData.proponente.uf);

                if (Array.isArray(lista)) {
                    const municipioId = Number(nomeMunicipio.trim());
                    const municipio = lista.find(mun => mun.id === municipioId);

                    if (municipio) {
                        console.log('Município encontrado pelo ID:', municipio.nome);
                        buscarDadosMunicipio(municipio.id);
                    } else {
                        console.warn(`Município com ID "${municipioId}" não encontrado para UF ${formData.proponente.uf}.`);
                        alert(`Município com ID "${municipioId}" não encontrado para UF ${formData.proponente.uf}.`);
                    }
                } else {
                    console.warn('Falha ao obter a lista de municípios.');
                    alert('Erro ao carregar municípios. Tente novamente.');
                }
            }
            return;
        }
        // Garantir que municipios esteja carregado
        if (!municipios.length && formData.proponente.uf) {
            console.log(`Carregando municípios para UF ${formData.proponente.uf}...`);
            await carregarMunicipios(formData.proponente.uf);
        }

        const normalizedInput = normalizeString(nomeMunicipio);
        const municipio = municipios.find(mun => {
            const normalizedMun = normalizeString(mun.nome);
            return (
                normalizedMun === normalizedInput ||
                normalizedMun.includes(normalizedInput) ||
                normalizedInput.includes(normalizedMun)
            );
        });

        if (municipio) {
            console.log('Município encontrado pelo nome:', municipio.nome, 'ID:', municipio.id);
            setFormData(prev => ({
                ...prev,
                proponente: { ...prev.proponente, cidade: municipio.id }
            }));
            buscarDadosMunicipio(municipio.id);
        } else {
            console.warn(`Município "${nomeMunicipio}" não encontrado para UF ${formData.proponente.uf}. Municipios disponíveis:`, municipios);
            setFormData(prev => ({
                ...prev,
                proponente: { ...prev.proponente, cidade: '' }
            }));
            alert(`Município "${nomeMunicipio}" não encontrado na lista de municípios da UF ${formData.proponente.uf}.`);
        }
    };

    const normalizeString = (str) => {
        return str
            ?.toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '') // Remove acentos
            .replace(/[^a-z0-9\s]/g, ''); // Remove caracteres especiais
    };

    const calcularVigenciaTotal = () => {
        const periodoEstruturacao = parseFloat(formData.dadosProjeto.periodoEstruturacao) || 1;
        const periodoExecucao = parseFloat(formData.dadosProjeto.periodoExecucao) || 0;
        const vigenciaTotal = periodoEstruturacao + periodoExecucao;
        setFormData(prev => ({
            ...prev,
            dadosProjeto: { ...prev.dadosProjeto, vigenciaTotal: vigenciaTotal.toString() }
        }));
    };

    useEffect(() => {
        const estruturacao = parseInt(formData.dadosProjeto.periodoEstruturacao) || 0;
        const execucao = parseInt(formData.dadosProjeto.periodoExecucao) || 0;
        const total = estruturacao + execucao;
        setFormData(prev => ({
            ...prev,
            dadosProjeto: {
                ...prev.dadosProjeto,
                vigenciaTotal: total > 0 ? total.toString() : ''
            }
        }));
    }, [formData.dadosProjeto.periodoEstruturacao, formData.dadosProjeto.periodoExecucao]);

    useEffect(() => {
        const cnpjNumeros = formData.proponente.cnpj.replace(/\D/g, '');
        if (cnpjNumeros.length === 14) {
            buscarDadosCNPJ(formData.proponente.cnpj);
        }
    }, [formData.proponente.cnpj]);

    const calcularValorGlobal = () => {
        const valorConcedente = parseMoeda(formData.dadosProjeto.valorConcedente);
        const valorContrapartida = parseMoeda(formData.dadosProjeto.valorContrapartida);
        const valorGlobal = valorConcedente + valorContrapartida;
        setFormData(prev => ({
            ...prev,
            dadosProjeto: { ...prev.dadosProjeto, valorGlobal: formatarMoeda(valorGlobal) }
        }));
    };

    const calcularPublicoIndireto = (publicoDireto) => {
        const publicoDiretoNum = parseInt(publicoDireto) || 0;
        const publicoIndireto = publicoDiretoNum * 3;
        setFormData(prev => ({
            ...prev,
            dadosProjeto: { ...prev.dadosProjeto, publicoIndireto: publicoIndireto.toString() }
        }));
    };

    const getObjetivosEspecificos = () => {
        const publico = formData.dadosProjeto.publicoAlvo;
        const quantidadeNucleos = formData.dadosProjeto.quantidadeNucleos || 'XX';
        const publicoStr = publico.length > 0 ? publico.join(', ') : 'crianças, adolescentes, jovens, adultos e idosos';
        return [
            `Oportunizar a prática esportiva sistematizada para ${publicoStr} em ${quantidadeNucleos} núcleo(s); (adequar o núcleo de acordo com a dimensão do projeto).`,
            'Auxiliar na diminuição de situações de risco e vulnerabilidade, através do fomento à prática esportiva;',
            'Oferecer um ambiente seguro e motivador, incentivando disciplina, trabalho em equipe e respeito.',
            'Promover hábitos saudáveis e a importância da atividade física regular;',
            'Desenvolver capacidades motoras, como força, flexibilidade, equilíbrio e coordenação, por meio das modalidades oferecidas;',
            'Estimular a socialização e o respeito mútuo entre os participantes, promovendo valores como disciplina, cooperação e cidadania.'
        ];
    };

    const generatePDF = () => {
        try {
            if (!window.jspdf || !window.jspdf.jsPDF) {
                throw new Error('jsPDF library is not loaded.');
            }
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });

            const config = {
                marginLeft: 10,
                marginRight: 10,
                marginTop: 15,
                lineHeight: 6,
                pageHeight: 297,
                footerSpace: 25,
                primaryColor: [0, 38, 102],
                secondaryColor: [255, 255, 255],
                tablePadding: 2,
                fontSize: {
                    title: 14,
                    subtitle: 12,
                    body: 10,
                    small: 8,
                },
                sectionSpacing: 5,
            };
            let currentY = config.marginTop;

            const addText = (text, x, y, maxWidth = 190, fontSize = 12, bold = false) => {
                doc.setFontSize(fontSize);
                doc.setFont("helvetica", bold ? "bold" : "normal");
                const lines = doc.splitTextToSize(text || 'N/A', maxWidth);
                doc.text(lines, x, y);
                return y + (lines.length * config.lineHeight);
            };

            const checkPageBreak = (spaceNeeded = 0) => {
                if (currentY + spaceNeeded > config.pageHeight - config.footerSpace) {
                    doc.addPage();
                    currentY = config.marginTop;
                    return true;
                }
                return false;
            };

            const createTable = (title, head, body, startY, colWidths = null, additionalConfig = {}) => {
                if (!doc.autoTable) {
                    throw new Error('jsPDF autoTable plugin is not loaded.');
                }

                // Adiciona o título da seção antes da tabela
                if (title) {
                    checkPageBreak(config.lineHeight);
                    currentY = addText(title, config.marginLeft, currentY, 190, config.fontSize.title, true);
                    currentY += 2; // Pequeno espaço entre o título e a tabela
                }

                const tableConfig = {
                    startY: currentY,
                    head: head,
                    body: body,
                    theme: 'grid',
                    headStyles: {
                        fillColor: config.primaryColor,
                        textColor: config.secondaryColor,
                        fontStyle: 'bold',
                        fontSize: config.fontSize.subtitle,
                        cellPadding: config.tablePadding,
                        halign: 'center',
                        minCellHeight: 6,
                    },
                    bodyStyles: {
                        fontSize: config.fontSize.body,
                        cellPadding: config.tablePadding,
                        textColor: [0, 0, 0],
                        fillColor: [255, 255, 255],
                        halign: 'left',
                        minCellHeight: 5,
                        overflow: 'linebreak',
                    },
                    margin: { left: config.marginLeft, right: config.marginRight },
                    tableWidth: 190,
                    // Impede a repetição do cabeçalho em páginas subsequentes
                    didDrawPage: (data) => {
                        if (data.pageNumber > data.table.startPage) {
                            data.table.head = [];
                        }
                    },
                    ...additionalConfig,
                };
                if (colWidths) {
                    tableConfig.columnStyles = {};
                    colWidths.forEach((width, index) => {
                        tableConfig.columnStyles[index] = { cellWidth: width };
                    });
                }
                doc.autoTable(tableConfig);
                currentY = doc.lastAutoTable.finalY + config.sectionSpacing;
                return currentY;
            };

            // Page 1 Header
            doc.setFontSize(16);
            doc.setTextColor(...config.primaryColor);
            doc.text('PROJETO TÉCNICO', 105, currentY, { align: 'center' });
            doc.text('IMPLEMENTAÇÃO E DESENVOLVIMENTO DE PROJETO', 105, currentY + 10, { align: 'center' });
            currentY += 25;

            // Seção 1 - INFORMAÇÕES GERAIS DO PROPONENTE
            // 1.1 IDENTIFICAÇÃO PROPONENTE
            const identificacaoProponente = [
                [`CNPJ Proponente: ${formData.proponente.cnpj || 'N/A'}`],
                [`Nome Proponente: ${formData.proponente.nomeProponente || 'N/A'}`],
                [`Nome do Dirigente: ${formData.proponente.nomeDirigente || 'N/A'}`],
                [`Telefone(s) de contato com DDD: ${Array.isArray(formData.proponente.telefones) && formData.proponente.telefones.length ? formData.proponente.telefones.join(', ') : 'N/A'}`],
                [`E-mail: ${formData.proponente.email || 'N/A'}`],
                [`Número da Proposta: ${formData.proponente.numeroProposta || 'N/A'}`],
                [`Emenda Parlamentar: ${formData.proponente.emendaParlamentar || 'N/A'}`],
                [`GND - Material de Consumo e Permanente: ${Array.isArray(formData.proponente.gnd) && formData.proponente.gnd.length ? formData.proponente.gnd.join(', ') : 'N/A'}`]
            ];
            currentY = createTable(
                '1. INFORMAÇÕES GERAIS DO PROPONENTE\n1.1 IDENTIFICAÇÃO PROPONENTE*',
                [['']],
                identificacaoProponente,
                currentY,
                [190]
            );

            // 1.2 RESPONSÁVEL PELA ELABORAÇÃO DO PROJETO TÉCNICO
            const responsavelElaboracao = [
                [`Nome: ${formData.proponente.responsavelNome || 'N/A'}`],
                [`E-mail: ${formData.proponente.responsavelEmail || 'N/A'}`],
                [`Vínculo com a Entidade: ${formData.proponente.responsavelVinculo || 'N/A'}`],
                [`Telefone(s): ${Array.isArray(formData.proponente.responsavelTelefones) ? formData.proponente.responsavelTelefones.join(', ') : 'N/A'}`]
            ];
            currentY = createTable(
                '1.2 RESPONSÁVEL PELA ELABORAÇÃO DO PROJETO TÉCNICO*',
                [['']],
                responsavelElaboracao,
                currentY,
                [190]
            );

            // 1.3 DIMENSÃO DO PROJETO
            const dimensaoProjeto = [
                [formData.proponente.dimensaoProjeto === 'Projeto Educacional' ? '(X) Projeto Educacional' : '( ) Projeto Educacional'],
                ['Oferta oportunidades de acesso à prática esportiva em suas diversas manifestações por meio de ações planejadas, inclusivas e lúdicas para crianças e adolescentes. Este nível de atendimento comporta os serviços de vivência, fundamentação, aprendizagem esportiva e fomento e difusão do conhecimento científico, tecnológico e de inovação.'],
                [formData.proponente.dimensaoProjeto === 'Projeto de Participação' ? '(X) Projeto de Participação' : '( ) Projeto de Participação'],
                ['Caracteriza-se pela vivência do esporte com autodeterminação a partir do conhecimento esportivo adquirido, pela transmissão pedagógica crítica e assumida dentre os hábitos culturais saudáveis ao longo da vida. Este nível abrange os serviços de esporte e lazer, atividade física, aprendizagem esportiva para crianças, jovens, adultos, idosos (esporte ao longo da vida), além do fomento e difusão do conhecimento científico, tecnológico e de inovação.']
            ];
            currentY = createTable(
                '1.3 DIMENSÃO DO PROJETO* (marque somente uma opção)',
                [['']],
                dimensaoProjeto,
                currentY,
                [190]
            );

            // 1.4 LOCALIDADE
            const selectedCity = (() => {
                const cityId = formData?.proponente?.cidade || '';
                const uf = formData?.proponente?.uf || '';
                if (cityId && Array.isArray(municipios) && municipios.length > 0) {
                    const municipio = municipios.find(m => m.id === Number(cityId));
                    return municipio ? municipio.nome : uf ? `Cidade não encontrada para UF ${uf}` : 'Cidade não encontrada';
                }
                return 'N/A';
            })();
            const localidadeData = [
                [`Cidade: ${selectedCity}`],
                [`UF: ${formData?.proponente?.uf ?? 'N/A'}`],
                [`IDH: ${formData?.proponente?.idh ?? 'N/A'}`],
                [`Ano de Referência: ${formData?.proponente?.anoIDH ?? 'N/A'}`]
            ];
            currentY = createTable(
                '1.4 LOCALIDADE - (onde o projeto será desenvolvido) - Índice de Desenvolvimento Humano* (SITE IBGE)',
                [['']],
                localidadeData,
                currentY,
                [190]
            );

            // 1.5 POPULAÇÃO
            const populacaoData = [
                [`Nº de habitantes: ${formData.proponente.numHabitantes || 'N/A'}`],
                [`Ano de referência: ${formData.proponente.anoHabitantes || 'N/A'}`]
            ];
            currentY = createTable(
                '1.5 POPULAÇÃO - Característica demográfica da localidade (SITE IBGE)*',
                [['']],
                populacaoData,
                currentY,
                [190]
            );

            // 1.6 INFORMAÇÕES SOBRE A ENTIDADE PROPONENTE
            const entidadeProponenteData = [
                [`A Entidade já celebrou parcerias com o Ministério do Esporte? ${formData.proponente.temParceria === 'sim' ? '(X) Sim' : '( ) Sim'} | ${formData.proponente.temParceria === 'nao' ? '(X) Não' : '( ) Não'}${formData.proponente.temParceria === 'sim' ? ` | Nº de parcerias: ${formData.proponente.numParcerias || 'N/A'}` : ''}`],
                [`A Entidade já deu publicidade às parcerias celebradas em seu respectivo site? ${formData.proponente.temPublicidade === 'sim' ? '(X) Sim' : '( ) Sim'} | ${formData.proponente.temPublicidade === 'nao' ? '(X) Não' : '( ) Não'}${formData.proponente.temPublicidade === 'sim' ? ` | Site: ${formData.proponente.publicidadeSite || 'N/A'}` : ''}`]
            ];
            currentY = createTable(
                '1.6 INFORMAÇÕES SOBRE A ENTIDADE PROPONENTE*',
                [['']],
                entidadeProponenteData,
                currentY,
                [190]
            );

            // 1.7 INFORMAÇÕES SOBRE O ESTATUTO DA ENTIDADE
            const estatutoHead = [['Descrição', 'Artigo']];
            const estatutoData = [
                [
                    'Análise Estatutária, art. 2º, inciso I, Lei 13.019/2014: Verificar se a Entidade NÃO distribui entre os seus sócios ou associados, conselheiros, diretores, empregados, doadores ou terceiros eventuais resultados, sobras, excedentes operacionais, brutos ou líquidos, dividendos, isenções de qualquer natureza, participações ou parcelas do seu patrimônio, auferidos mediante o exercício de suas atividades, e que os aplique integralmente na consecução do respectivo objeto social, de forma imediata ou por meio da constituição de fundo patrimonial ou fundo de reserva.',
                    formData.proponente.artigo2 || 'N/A'
                ],
                [
                    'Análise Estatutária, art. 33, inciso I, Lei 13.019/2014: Verificar se a Entidade POSSUI objetivos voltados à promoção de atividades e finalidades de relevância pública e social.',
                    formData.proponente.artigo33I || 'N/A'
                ],
                [
                    'Análise Estatutária, art. 33, inciso III, Lei 13.019/2014: Verificar se em caso de dissolução da entidade, o respectivo patrimônio líquido seja transferido a outra pessoa jurídica de igual natureza que preencha os requisitos desta Lei e cujo objeto social seja, preferencialmente, o mesmo da entidade extinta.',
                    formData.proponente.artigo33III || 'N/A'
                ]
            ];
            currentY = createTable(
                '1.7 INFORMAÇÕES SOBRE O ESTATUTO DA ENTIDADE*',
                estatutoHead,
                estatutoData,
                currentY,
                [150, 40],
                {
                    bodyStyles: { minCellHeight: 10, textColor: [0, 0, 0] },
                    headStyles: { textColor: [255, 255, 255], fillColor: [0, 38, 102] },
                    columnStyles: {
                        0: { cellWidth: 150, halign: 'left' },
                        1: { cellWidth: 40, halign: 'center' }
                    }
                }
            );

            // Seção 2 - DADOS GERAIS DO PROJETO TÉCNICO
            // 2.1 OBJETO
            const objetoProjeto = [
                ['Implementação e desenvolvimento do Projeto:'],
                [formData.dadosProjeto.objetoProjeto || 'N/A']
            ];
            currentY = createTable(
                '2. DADOS GERAIS DO PROJETO TÉCNICO\n2.1 OBJETO',
                [['']],
                objetoProjeto,
                currentY,
                [190]
            );

            // 2.2 OBJETIVO GERAL
            const objetivoGeral = [
                ['Promover a inclusão social e a melhoria da qualidade de vida por meio das práticas esportivas e de lazer como ferramenta de transformação social, utilizando o esporte como instrumento de formação esportiva, disciplinar e valores fundamentais, através do estímulo do bem-estar físico, psicológico dos beneficiados envolvidos.']
            ];
            currentY = createTable(
                '2.2 OBJETIVO GERAL',
                [['']],
                objetivoGeral,
                currentY,
                [190]
            );

            // 2.3 OBJETIVOS ESPECÍFICOS
            const publicoAlvoOptions = ['crianças', 'adolescentes', 'jovens', 'adultos', 'idosos'];
            const selectedPublicoAlvo = Array.isArray(formData.dadosProjeto.publicoAlvo) && formData.dadosProjeto.publicoAlvo.length > 0
                ? formData.dadosProjeto.publicoAlvo.map(opt => opt.charAt(0).toUpperCase() + opt.slice(1)).join(', ')
                : 'N/A';
            const objetivosEspecificos = [
                [`1. Oportunizar a prática esportiva sistematizada para ${selectedPublicoAlvo} (adequar o núcleo de acordo com a dimensão do projeto).`],
                ['2. Auxiliar na diminuição de situações de risco e vulnerabilidade, através do fomento à prática esportiva.'],
                ['3. Oferecer um ambiente seguro e motivador, incentivando disciplina, trabalho em equipe e respeito.'],
                ['4. Promover hábitos saudáveis e a importância da atividade física regular.'],
                ['5. Desenvolver capacidades motoras, como força, flexibilidade, equilíbrio e coordenação, por meio das modalidades oferecidas.'],
                ['6. Estimular a socialização e o respeito mútuo entre os participantes, promovendo valores como disciplina, cooperação e cidadania.'],
                [`Número de núcleos ajustado com base na dimensão do projeto: ${formData.dadosProjeto.quantidadeNucleos || 'XX'} núcleos`]
            ];
            currentY = createTable(
                '2.3 OBJETIVOS ESPECÍFICOS',
                [['']],
                objetivosEspecificos,
                currentY,
                [190]
            );

            // 2.4 PÚBLICO-ALVO
            const publicoAlvoData = [
                ['Deverá ser comprovado no acompanhamento e relatório de cumprimento do objeto.'],
                ['Descrever quantitativamente.'],
                [`Público direto (beneficiários): ${formData.dadosProjeto.publicoDireto || 'XX'} Beneficiários`],
                [`Faixa etária do público direto: ${formData.dadosProjeto.faixaEtaria || 'XX'} (a partir de 06 anos, obrigatoriamente)`],
                [`Público indireto: ${formData.dadosProjeto.publicoIndireto || 'XX'} beneficiados indiretos (Famílias das alunas e comunidade local: previsão de 3 (três) beneficiários indiretos a cada 1 (um) beneficiário direto. Exemplo: 1 (um) beneficiário + 2 (dois) membros familiares).`]
            ];
            currentY = createTable(
                '2.4 PÚBLICO-ALVO',
                [['']],
                publicoAlvoData,
                currentY,
                [190]
            );

            // 2.5 VIGÊNCIA DO PROJETO
            const vigenciaData = [
                [`Período de Estruturação: ${formData.dadosProjeto.periodoEstruturacao || 'N/A'} (Em caso de Termo de Fomento a previsão é de até 2 (dois) meses de pagamento de RH na estruturação – Portaria MEsp nº 102/2024).`],
                [`Período de Execução: ${formData.dadosProjeto.periodoExecucao || 'N/A'} (no mínimo 6 (seis) meses)`],
                [`Vigência Total: ${formData.dadosProjeto.vigenciaTotal || 'N/A'}`]
            ];
            currentY = createTable(
                '2.5 VIGÊNCIA DO PROJETO*',
                [['']],
                vigenciaData,
                currentY,
                [190]
            );

            // 2.6 NÚCLEOS
            const nucleosData = [
                [`Quantidade de núcleos: ${formData.dadosProjeto.quantidadeNucleos || 'XX'} (${numeroPorExtenso && typeof numeroPorExtenso === 'function' ? numeroPorExtenso(formData.dadosProjeto.quantidadeNucleos || 'XX') : 'N/A'})`],
                [`Localidade: ${formData.dadosProjeto.localidadeNucleos || 'N/A'}`]
            ];
            currentY = createTable(
                '2.6 NÚCLEOS (onde serão realizadas as atividades)*',
                [['']],
                nucleosData,
                currentY,
                [190]
            );

            // 2.7 MODALIDADES A SEREM DESENVOLVIDAS
            const modalidadesList = Array.isArray(formData.dadosProjeto.modalidades) && formData.dadosProjeto.modalidades.length > 0
                ? formData.dadosProjeto.modalidades.map((mod, index) => [`${index + 1}. ${mod.modalidade || 'N/A'}`])
                : [['Nenhuma modalidade especificada']];
            currentY = createTable(
                '2.7 MODALIDADES A SEREM DESENVOLVIDAS*',
                [['']],
                modalidadesList,
                currentY,
                [190]
            );

            // 2.8 CRONOGRAMA DE EXECUÇÃO FÍSICO-FINANCEIRA
            const cronogramaData = [
                [`Valor do Concedente: R$ ${formData.dadosProjeto.valorConcedente || 'N/A'}`],
                [`Valor do Convenente – Contrapartida: R$ ${formData.dadosProjeto.valorContrapartida || 'N/A'}`],
                [`Valor Global: R$ ${formData.dadosProjeto.valorGlobal || 'N/A'}`]
            ];
            currentY = createTable(
                '2.8 CRONOGRAMA DE EXECUÇÃO FÍSICO-FINANCEIRA*',
                [['']],
                cronogramaData,
                currentY,
                [190]
            );

            // Seção 3 - INFORMAÇÕES DO PROJETO TÉCNICO
            // 3.1 ESTRUTURAÇÃO DO PROJETO - VERSÃO ATUALIZADA
            const itensEstruturação = [
                'Contratação de recursos humanos',
                'Contratação de prestação de serviços',
                'Aquisição de materiais esportivos',
                'Aquisição de uniformes e acessórios para os beneficiários',
                'Aquisição dos materiais de identificação e divulgação'
            ];

            // Filtra apenas os itens marcados
            const itensSelecionados = formData.infoProjeto.estruturacao?.filter(item => 
                itensEstruturação.includes(item)
            ) || [];

            // Adiciona o campo "Outros" se existir e não estiver vazio
            if (formData.infoProjeto.outrosEstruturação?.trim()) {
                itensSelecionados.push(`Outros: ${formData.infoProjeto.outrosEstruturação}`);
            }

            // Prepara o conteúdo para o PDF
            const conteudoEstruturacao = [
                ['Visa à organização e preparação das condições necessárias para a execução do projeto, garantindo que todas as etapas sejam realizadas de forma eficiente e dentro das diretrizes estabelecidas, conforme a seguir:'],
                ...itensSelecionados.map(item => [`• ${item}`])
            ];

            // Se nenhum item foi selecionado, mantemos o texto padrão
            if (itensSelecionados.length === 0) {
                conteudoEstruturacao.push(
                    ['• Contratação de recursos humanos'],
                    ['• Contratação de prestação de serviços'],
                    ['• Aquisição de materiais esportivos'],
                    ['• Aquisição de uniformes e acessórios para os beneficiários'],
                    ['• Aquisição dos materiais de identificação e divulgação']
                );
            }

            currentY = createTable(
                '3. INFORMAÇÕES DO PROJETO TÉCNICO\n3.1 ESTRUTURAÇÃO DO PROJETO',
                [['']],
                conteudoEstruturacao,
                currentY,
                [190]
            );

            // 3.2 IMPLEMENTAÇÃO E DESENVOLVIMENTO DO PROJETO
            const modalidadesList32 = Array.isArray(formData.dadosProjeto.modalidades) && formData.dadosProjeto.modalidades.length > 0
                ? formData.dadosProjeto.modalidades.map(mod => mod.modalidade || 'N/A').join(', ')
                : 'Nenhuma modalidade especificada';
            const implementacaoProjeto = [
                ['Refere-se à execução das aulas e atividades práticas com os beneficiários, promovendo o desenvolvimento técnico, social e inclusivo através do(s) seguintes modalidades:'],
                [`• ${modalidadesList32}`],
                ['Quanto a metodologia, a implementação do projeto será conduzida de forma estruturada, garantindo o alcance dos objetivos e a participação efetiva dos beneficiários.'],
                ['A metodologia adotada se baseia em atividades teóricas, práticas e dinâmicas, organizadas da seguinte forma:']
            ];
            currentY = createTable(
                '3.2 IMPLEMENTAÇÃO E DESENVOLVIMENTO DO PROJETO',
                [['']],
                implementacaoProjeto,
                currentY,
                [190]
            );

            // 3.3 NÚCLEOS
            const tipoEspaco = formData.infoProjeto.tipoNucleo ?.length > 0 ? formData.infoProjeto.tipoNucleo.join(' e '): 'N/A';
            const nucleosInfo = [
                [`O(s) núcleo(s) do projeto será(ão) implementados em espaços comunitários ${tipoEspaco} adequadas às modalidades esportivas propostas, localizado próximo à comunidade beneficiada, que preferencialmente, não demandam transporte para o deslocamento dos beneficiários.`],
                [`Esse(s) espaço(s) conta(m) com disponibilidade de área adequada para a prática esportiva, existência de infraestrutura básica, condições de acessibilidade dos espaços e segurança do local.`],
                [`O(s) núcleo(s) do projeto serão organizados de forma a proporcionar uma experiência positiva e eficiente para os beneficiários.`],
                [`Serão ${formData.dadosProjeto.quantidadeNucleos || 'XX'} (${numeroPorExtenso && typeof numeroPorExtenso === 'function' ? numeroPorExtenso(formData.dadosProjeto.quantidadeNucleos || 'XX') : 'N/A'}) núcleos, cada um contará com um número médio de ${formData.dadosProjeto.publicoDireto || 'XX'} (${numeroPorExtenso && typeof numeroPorExtenso === 'function' ? numeroPorExtenso(formData.dadosProjeto.publicoDireto || 'XX') : 'N/A'}) beneficiários, divididos em turmas de acordo com a capacidade e modalidade oferecida.`]
            ];
            currentY = createTable(
                '3.3 NÚCLEOS',
                [['']],
                nucleosInfo,
                currentY,
                [190]
            );

            // 3.4 METODOLOGIA DE DESENVOLVIMENTO DO PROJETO
            const metodologiaDesenvolvimento = [
                ['Este Projeto visa combater o sedentarismo e promover um estilo de vida saudável através da prática regular de atividades físicas e fortalecimento da inclusão social. A implementação deste projeto trará benefícios significativos na qualidade de vida dos beneficiados, visando criar uma comunidade mais ativa e integrada.'],
                [`O projeto terá duração de ${formData.dadosProjeto.vigenciaTotal || 'XX'} (${numeroPorExtenso && typeof numeroPorExtenso === 'function' ? numeroPorExtenso(formData.dadosProjeto.vigenciaTotal || 'XX') : 'N/A'}) meses, sendo ${formData.dadosProjeto.periodoEstruturacao || 'XX'} (${numeroPorExtenso && typeof numeroPorExtenso === 'function' ? numeroPorExtenso(formData.dadosProjeto.periodoEstruturacao || 'XX') : 'N/A'}) para estruturação e ${formData.dadosProjeto.periodoExecucao || 'XX'} (${numeroPorExtenso && typeof numeroPorExtenso === 'function' ? numeroPorExtenso(formData.dadosProjeto.periodoExecucao || 'XX') : 'N/A'}) para execução.`]
            ];
            currentY = createTable(
                '3.4 METODOLOGIA DE DESENVOLVIMENTO DO PROJETO',
                [['']],
                metodologiaDesenvolvimento,
                currentY,
                [190]
            );

            // 3.4.1 ESTRUTURA DAS AULAS
            const estruturaAulas = [
                ['Cada aula esportiva seguirá uma estrutura padronizada para garantir consistência e qualidade, independentemente da modalidade esportiva. Esta estrutura incluirá:'],
                ['• Aquecimento: Atividades lúdicas que preparam o corpo e a mente para o exercício, promovendo a circulação sanguínea e reduzindo o risco de lesões.'],
                ['• Instrução Técnica: Foco no desenvolvimento de habilidades técnicas específicas da modalidade, com instruções claras e demonstrações práticas.'],
                ['• Prática Guiada: Exercícios práticos onde os participantes aplicam as habilidades aprendidas sob a supervisão ativa dos instrutores, com feedback imediato.'],
                ['• Jogos ou Competições: Atividades que incentivam a aplicação das habilidades em um contexto de jogo ou competição, promovendo o espírito esportivo e a colaboração.'],
                ['• Intervalo e Socialização: Momento de descanso mais prolongado, permitindo o descanso e interação. Esse intervalo contribui para a recuperação física e fortalece os laços de amizade e pertencimento entre os participantes.'],
                ['• Alongamento e Desaceleração: Encerramento das aulas com atividades leves para baixar a intensidade física e uma sessão de reflexão sobre as lições aprendidas e a autoavaliação do desempenho.']
            ];
            currentY = createTable(
                '3.4.1 ESTRUTURA DAS AULAS',
                [['']],
                estruturaAulas,
                currentY,
                [190]
            );

            // 3.4.2 METODOLOGIA DE ENSINO
            const metodologiaEnsino = [
                ['• Aprendizado Baseado em Competências: Focar no desenvolvimento de competências específicas de cada modalidade, garantindo que os alunos progridam em habilidades técnicas e táticas.'],
                ['• Educação Inclusiva: Adaptação das aulas para atender a diversas necessidades, incluindo ajustes para participantes com diferentes níveis de habilidade e capacidades físicas.'],
                ['• Ensino Integrado: Integrar lições de vida, como trabalho em equipe, liderança, resiliência e ética esportiva, nas sessões de treinamento.'],
                ['• Feedback Construtivo: Fornecer feedback regular e construtivo para encorajar e melhorar o desempenho dos alunos, enquanto se mantém um ambiente positivo e de suporte.']
            ];
            currentY = createTable(
                '3.4.2 METODOLOGIA DE ENSINO',
                [['']],
                metodologiaEnsino,
                currentY,
                [190]
            );

            // 3.4.3 DETALHAMENTO ESPECÍFICO SOBRE AS MODALIDADES
            const detalhamentoModalidades = [
                [formData.infoProjeto.detalhamentoModalidades || 'N/A']
            ];
            currentY = createTable(
                '3.4.3 DETALHAMENTO ESPECÍFICO SOBRE AS MODALIDADES OFERECIDAS POR ESTE PROJETO',
                [['']],
                detalhamentoModalidades,
                currentY,
                [190]
            );

            // 3.4.4 FREQUÊNCIA NAS AULAS
            const frequenciaAulas = [
                ['Será requisito a todos os beneficiários, incluindo os menores, manter frequência mínima de 70% (setenta por cento) nas aulas. Esse critério visa assegurar o engajamento dos participantes e garantir que eles aproveitem efetivamente os benefícios oferecidos pelo projeto. A frequência será monitorada durante a execução das atividades, e os beneficiários que não atingirem o percentual mínimo de presença podem ser substituídos ou ter o benefício suspenso, conforme as regras estabelecidas. Isso visa garantir que o projeto seja realizado de maneira eficaz, com a participação ativa de todos os beneficiários. Em casos de faltas frequentes por parte dos beneficiários, a vaga será remanejada para outro participante, que poderá ser selecionado a partir de um cadastro reserva. Se não houver cadastro reserva, uma nova divulgação/chamada será feita para preencher as vagas em aberto, de modo a completar o total de participantes do projeto.']
            ];
            currentY = createTable(
                '3.4.4 FREQUÊNCIA NAS AULAS',
                [['']],
                frequenciaAulas,
                currentY,
                [190]
            );

            // 3.4.5 AVALIAÇÃO E PROGRESSO
            const avaliacaoProgresso = [
                ['Avaliações Regulares: Realizar avaliações periódicas para monitorar o progresso, ajustar os planos de aula conforme necessário e garantir que todos os participantes estejam alcançando seu potencial máximo.'],
                ['Portfólios de Desenvolvimento do Estudante: Manter registros detalhados do progresso de cada participante para acompanhar as melhorias e áreas que necessitam de atenção adicional.']
            ];
            currentY = createTable(
                '3.4.5 AVALIAÇÃO E PROGRESSO',
                [['']],
                avaliacaoProgresso,
                currentY,
                [190]
            );

            // 3.5 INSCRIÇÕES
            const inscricoes = [
                ['As inscrições deverão ser feitas antes do início do Projeto e devem alcançar o número de participantes previstos na meta do projeto. Salientamos que, caso haja um número inferior de inscritos, deverão ser realizadas ações de divulgação com intuito de preencher novas inscrições, a fim de que os recursos disponibilizados sejam bem aproveitados e a ação atenda o máximo de participantes. Poderão ser realizadas em plataformas online e por meio de fichas de inscrição, que deverão estar no local em que será realizado o Projeto ou em local pré-estabelecido durante toda a execução, de forma acessível aos colaboradores para eventuais consultas sobre os participantes. Após o encerramento do Projeto, todas as inscrições deverão ser registradas e preservadas para posterior prestação de contas. No caso de menores de idade, as inscrições para o projeto deverão ser feitas pelos responsáveis legais, que serão os responsáveis pelo preenchimento do cadastro e pela apresentação dos documentos necessários. Em alguns casos, pode ser exigido que o responsável legal assine um termo de compromisso para garantir a participação do menor no projeto, bem como o direito de imagem.']
            ];
            currentY = createTable(
                '3.5 INSCRIÇÕES',
                [['']],
                inscricoes,
                currentY,
                [190]
            );

            // 3.6 GRADE HORÁRIA DAS ATIVIDADES
            const gradeHorariaIntro = [
                [`O(s) núcleo(s) do projeto ofertará(ão), no mínimo, 20 (vinte) horas semanais de atividades, no mínimo 16 (dezesseis) horas de atendimento mais 4 (quatro) horas de planejamento, distribuídos em turmas separadas por faixa etária e perfil dos participantes, de forma a atender os ${formData.dadosProjeto.publicoDireto || 'XX'} (${numeroPorExtenso && typeof numeroPorExtenso === 'function' ? numeroPorExtenso(formData.dadosProjeto.publicoDireto || 'XX') : 'N/A'}) beneficiários previstos.`]
            ];
            currentY = createTable(
                '3.6 GRADE HORÁRIA DAS ATIVIDADES',
                [['']],
                gradeHorariaIntro,
                currentY,
                [190]
            );

            const gradeHorariaRows = Array.isArray(formData.infoProjeto.gradeHoraria) && formData.infoProjeto.gradeHoraria.length > 0 
                ? formData.infoProjeto.gradeHoraria.map((row, index) => [
                    `${index + 1}.`,
                    row.nucleoLocalidade || 'N/A',
                    row.modalidadesNucleo || 'N/A',
                    row.gradeHorariaDescricao || 'N/A' // Usar o novo campo
                ]) 
                : [['1.', 'N/A', 'N/A', 'N/A']];

            currentY = createTable(
                null,
                [['Nº', 'Núcleo (localidade)', 'Modalidades', 'Grade Horária']],
                gradeHorariaRows,
                currentY,
                [15, 60, 60, 55],
                { bodyStyles: { fontSize: config.fontSize.small } }
            );

            // 3.7 EVENTOS
            const eventosSelecionados = Array.isArray(formData.infoProjeto.eventosSelecionados)
                ? formData.infoProjeto.eventosSelecionados
                : [];
            const abrangencia = formData.infoProjeto.abrangenciaEventos || 'Por Projeto';
            const numNucleos = parseInt(formData.dadosProjeto.quantidadeNucleos) || 1;
            const multiplicador = abrangencia === 'Por Núcleo' ? numNucleos : 1;

            let eventosContent = `Têm como objetivo celebrar o início e o sucesso do projeto, fortalecer o engajamento da comunidade e promover um ambiente seguro e acolhedor para os beneficiários e suas famílias. Essas celebrações destacam o impacto positivo do projeto, incentivando a continuidade da prática esportiva e a inclusão social. Durante cada evento, serão distribuídos kits de lanches aos beneficiados e à equipe técnica do projeto.\n`;

            if (eventosSelecionados.length > 0) {
                eventosContent += `Eventos selecionados: ${eventosSelecionados.join(' e ')}.\n`;
            } else {
                eventosContent += `Nenhum evento selecionado.\n`;
            }

            if (eventosSelecionados.includes('Evento de Abertura')) {
                eventosContent += `EVENTO DE ABERTURA\n`;
                eventosContent += `Tem como principal objetivo apresentar o projeto à comunidade local, reforçando sua relevância para o desenvolvimento social e esportivo, além de promover os valores fundamentais que o esporte oferece, como inclusão social, saúde, cidadania e trabalho em equipe. O evento marcará o início do projeto, com uma saudação e explicação dos objetivos e da programação, incluindo:\n`;
                eventosContent += `• Divulgação ampla: Informar à comunidade local sobre a existência do projeto, seus objetivos e como as pessoas podem participar ou apoiar. Esse momento é essencial para atrair beneficiados, entusiastas do esporte, famílias e potenciais parceiros.\n`;
                eventosContent += `• Educação e conscientização: Sensibilizar a comunidade sobre temas relacionados ao esporte, como saúde, prevenção de doenças, disciplina e trabalho em equipe.\n`;
                eventosContent += `• Fortalecimento da autoestima comunitária: Mostrar que a comunidade é capaz de organizar e sustentar um projeto transformador, reforçando o orgulho local.\n`;
            }

            if (eventosSelecionados.includes('Evento de Encerramento')) {
                eventosContent += `EVENTO DE ENCERRAMENTO\n`;
                eventosContent += `Será organizado para comemorar o término do projeto e reconhecer os esforços e o progresso dos participantes, por meio de competições/torneios entre os beneficiados. Incluirá cerimônia de premiação, demonstrações de habilidades, apresentações, discursos de agradecimento e registros fotográficos/vídeos das atividades. Todos os participantes receberão medalhas personalizadas em reconhecimento ao seu esforço, e os três melhores colocados receberão troféus especiais.\n`;
            }

            eventosContent += `Abrangência: ${abrangencia}\n`;
            eventosContent += `Total de Eventos: ${eventosSelecionados.length * multiplicador}`;

            currentY = createTable(
                '3.7 EVENTOS',
                [['']],
                [[eventosContent]],
                currentY,
                [190]
            );

            // 3.8 RECURSOS HUMANOS
            const tipoRH = formData.infoProjeto.tipoRH?.toLowerCase() === 'cedidos' ? 'cedidos' : 'contratados';
            const recursosHumanosIntro = [
                [`Todos os profissionais envolvidos diretamente no projeto terão atribuições específicas necessárias à execução do projeto. Serão ${tipoRH} professores de educação física devidamente qualificados para as modalidades que assim exigem, bem como profissionais específicos de cada modalidade, custeados com os recursos da emenda destinada a este projeto.`]
            ];
            currentY = createTable(
                '3.8 RECURSOS HUMANOS',
                [['']],
                recursosHumanosIntro,
                currentY,
                [190]
            );
            const recursos = Array.isArray(formData.infoProjeto.recursosHumanos) && formData.infoProjeto.recursosHumanos.length > 0 
                ? formData.infoProjeto.recursosHumanos.map(row => [
                    row.funcaoRH || 'N/A',
                    row.quantidadeRH || 'N/A',
                    row.atribuicaoRH || 'N/A',
                    row.cargaHorariaRH || 'N/A',
                    row.periodoRH || 'N/A',
                ])
                : [['N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']];
            currentY = createTable(
                null,
                [['Função', 'Qtd.', 'Atribuição', 'Carga Horária Semanal / Diária', 'Qtd Meses/Diárias']],
                recursos,
                currentY,
                [30, 15, 40, 55, 50],
                { bodyStyles: { fontSize: config.fontSize.small } }
            );

            // 3.9 MATERIAIS FORNECIDOS
            const materiaisIntro = [
                ['Serão adquiridos os acessórios específicos para cada modalidade a ser executada, os quais serão distribuídos para cada núcleo de acordo com a modalidade e a quantidade de beneficiados. Aqueles de uso coletivo ficarão sob guarda e responsabilidade da Entidade.']
            ];
            currentY = createTable(
                '3.9 MATERIAIS FORNECIDOS',
                [['']],
                materiaisIntro,
                currentY,
                [190]
            );
            const materiais = Array.isArray(formData.infoProjeto.materiais) && formData.infoProjeto.materiais.length > 0 
                ? formData.infoProjeto.materiais.map(row => [
                    row.modalidadeMaterial || 'N/A',
                    row.material || 'N/A',
                    row.tipoAquisicao || 'N/A',
                    row.especificacaoMaterial || 'N/A',
                    row.justificativaMaterial || 'N/A'
                ])
                : [['N/A', 'N/A', 'N/A', 'N/A', 'N/A']];
            currentY = createTable(
                null,
                [['Modalidade', 'Material', 'Aquisição ou Locação', 'Especificação', 'Justificativa']],
                materiais,
                currentY,
                [30, 30, 30, 50, 50],
                { bodyStyles: { fontSize: config.fontSize.small } }
            );

            // 3.10 UNIFORMES
            const uniformesIntro = [
                [`Para garantir um atendimento adequado aos beneficiários, será realizada a aquisição de uniformes para uso individual dos participantes e da comissão técnica. Cada aluno receberá ${formData.infoProjeto.quantidadeConjuntosUniforme || 'XX'} (${numeroPorExtenso && typeof numeroPorExtenso === 'function' ? numeroPorExtenso(formData.infoProjeto.quantidadeConjuntosUniforme || 'XX') : 'N/A'}) conjuntos de uniforme, além de uma reserva técnica para reposição em casos de desgaste, perda ou substituição de alunos ao longo do projeto.`]
            ];
            currentY = createTable(
                '3.10 UNIFORMES',
                [['']],
                uniformesIntro,
                currentY,
                [190]
            );
            const uniformes = Array.isArray(formData.infoProjeto.uniformes) && formData.infoProjeto.uniformes.length > 0 
                ? formData.infoProjeto.uniformes.map(row => [
                    row.modalidadeUniforme || 'N/A',
                    row.itemUniforme || 'N/A',
                    row.especificacaoUniforme || 'N/A'
                ])
                : [['N/A', 'N/A', 'N/A']];
            currentY = createTable(
                null,
                [['Modalidade', 'Item', 'Especificação']],
                uniformes,
                currentY,
                [60, 60, 70]
            );

            // 3.11 IDENTIFICAÇÃO DO PROJETO
            const identificacaoProjeto = [
                ['Em relação à divulgação do projeto, fundamenta-se como elemento primordial, com vistas ao alcance dos beneficiados junto à comunidade regional. A identificação visual do projeto será aplicada em lugar de visibilidade, no núcleo, observando os padrões estabelecidos no Manual de Identidade Visual, disponível no site do Ministério, para o acompanhamento pela comunidade local e pelos órgãos de controle e fiscalização.'],
                [`• Faixas: ${Array.isArray(formData.infoProjeto.identificacao) && formData.infoProjeto.identificacao.includes('Faixas') ? '(X)' : '( )'}`],
                [`• Banners: ${Array.isArray(formData.infoProjeto.identificacao) && formData.infoProjeto.identificacao.includes('Banners') ? '(X)' : '( )'}`],
                [`• Placa: ${Array.isArray(formData.infoProjeto.identificacao) && formData.infoProjeto.identificacao.includes('Placa') ? '(X)' : '( )'}`],
                [`• Outros: ${Array.isArray(formData.infoProjeto.identificacao) && formData.infoProjeto.identificacao.includes('Outros') ? `(X) ${formData.infoProjeto.outrosIdentificacao || 'N/A'}` : '( )'}`]
            ];
            currentY = createTable(
                '3.11 IDENTIFICAÇÃO DO PROJETO',
                [['']],
                identificacaoProjeto,
                currentY,
                [190]
            );

            // 3.12 DIVULGAÇÃO DO PROJETO
            const divulgacaoProjeto = [
                ['Será realizada de forma ampla e irrestrita. O objetivo é dar publicidade aos distintos públicos sobre as ações e o retorno dos resultados das intervenções públicas junto à sociedade.'],
                ['Além de informações de interesse do público-alvo e de ações de relevância social, a divulgação apresenta resultados que, a partir do desenvolvimento de estratégias de comunicação, são passíveis de aumentar a consciência do cidadão comum sobre o papel e a importância dos projetos sociais no seu cotidiano. Portanto, deve-se fazer uso dos diversos meios de comunicação e mídia.'],
                ['Detalhe como ocorrerá a divulgação das ações do Projeto (pode ser assinalada mais de uma alternativa):'],
                [`Carros ou bicicletas de som: ${Array.isArray(formData.infoProjeto.divulgacao) && formData.infoProjeto.divulgacao.includes('Carros ou bicicletas de som') ? '(X)' : '( )'}`],
                [`Cartazes: ${Array.isArray(formData.infoProjeto.divulgacao) && formData.infoProjeto.divulgacao.includes('Cartazes') ? '(X)' : '( )'}`],
                [`Faixas: ${Array.isArray(formData.infoProjeto.divulgacao) && formData.infoProjeto.divulgacao.includes('Faixas') ? '(X)' : '( )'}`],
                [`Banners: ${Array.isArray(formData.infoProjeto.divulgacao) && formData.infoProjeto.divulgacao.includes('Banners') ? '(X)' : '( )'}`],
                [`Jornais: ${Array.isArray(formData.infoProjeto.divulgacao) && formData.infoProjeto.divulgacao.includes('Jornais') ? '(X)' : '( )'}`],
                [`Panfletos: ${Array.isArray(formData.infoProjeto.divulgacao) && formData.infoProjeto.divulgacao.includes('Panfletos') ? '(X)' : '( )'}`],
                [`Folder: ${Array.isArray(formData.infoProjeto.divulgacao) && formData.infoProjeto.divulgacao.includes('Folder') ? '(X)' : '( )'}`],
                [`Mídia (rádio e televisão): ${Array.isArray(formData.infoProjeto.divulgacao) && formData.infoProjeto.divulgacao.includes('Mídia') ? '(X)' : '( )'}`],
                [`Internet: ${Array.isArray(formData.infoProjeto.divulgacao) && formData.infoProjeto.divulgacao.includes('Internet') ? '(X)' : '( )'}`],
                [`Outros: ${formData.infoProjeto.outrosDivulgacao ? `(X) ${formData.infoProjeto.outrosDivulgacao}` : '( )'}`],
                ['Qual será a forma de custeio da divulgação?'],
                [`Recursos da Emenda Parlamentar: ${Array.isArray(formData?.infoProjeto?.custeioDivulgacao) && formData.infoProjeto.custeioDivulgacao.includes('Recursos da Emenda Parlamentar') ? '(X)' : '( )'}`],
                [`Outros Recursos: ${Array.isArray(formData?.infoProjeto?.custeioDivulgacao) && formData.infoProjeto.custeioDivulgacao.includes('Outros Recursos') ? '(X)' : '( )'}`]
            ];
           currentY = createTable(
                '3.12 DIVULGAÇÃO DO PROJETO',
                [['']],
                divulgacaoProjeto,
                currentY,
                [190]
            );

// Footer
const addFooter = () => {
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(config.fontSize.small);
        doc.setTextColor(100);
        doc.text(`Página ${i} de ${pageCount}`, config.marginLeft, config.pageHeight - 10);
    }
};
addFooter();

// Save PDF
const nomeProponente = formData.proponente.nomeProponente
    ? formData.proponente.nomeProponente.replace(/[^a-zA-Z0-9]/g, '_')
    : 'projeto_tecnico';
const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
doc.save(`Projeto_Tecnico_${nomeProponente}_${timestamp}.pdf`);
console.log('PDF gerado com sucesso!');
} catch (error) {
    console.error('Erro ao gerar o PDF:', error);
    alert(`Erro ao gerar o PDF: ${error.message}`);
}
};

// Função para renderizar abas
const renderTabs = () => (
    <div className="tabs">
        {['info-proponente', 'dados-projeto', 'info-projeto'].map(tab => (
            <button
                key={tab}
                className={activeTab === tab ? 'active' : ''}
                onClick={() => setActiveTab(tab)}
            >
                {tab === 'info-proponente' ? 'Informações do Proponente' :
                    tab === 'dados-projeto' ? 'Dados do Projeto' :
                        'Informações do Projeto'}
            </button>
        ))}
    </div>
);

// Função para renderizar campos de uma seção
const renderFields = (section, fields) => (
        <div className="form-section">
            {fields.map(field => (
                <div key={field.name} className="form-group">
                    {field.customRender ? (
                        field.customRender(formData, handleInputChange, isCNPJEditable)
                    ) : (
                        <>
                            <label>{field.label}</label>
                            {field.type === 'select' ? (
                                <select
                                    value={formData[section][field.name] || ''}
                                    onChange={(e) => handleInputChange(section, field.name, e.target.value)}
                                >
                                    <option value="">Selecione</option>
                                    {field.options.map(option => (
                                        <option key={option} value={option}>{option}</option>
                                    ))}
                                </select>
                            ) : field.type === 'checkbox' ? (
                                <div>
                                    {field.options.map(option => (
                                        <label key={option}>
                                            <input
                                                type="checkbox"
                                                checked={Array.isArray(formData[section][field.name]) && formData[section][field.name].includes(option)}
                                                onChange={(e) => {
                                                    const current = formData[section][field.name] || [];
                                                    const updated = e.target.checked
                                                        ? [...current, option]
                                                        : current.filter(item => item !== option);
                                                    handleInputChange(section, field.name, updated);
                                                }}
                                            />
                                            {option}
                                        </label>
                                    ))}
                                    {field.name === 'identificacao' && (
                                        <input
                                            type="text"
                                            placeholder="Outros"
                                            value={formData[section].outrosIdentificacao || ''}
                                            onChange={(e) => handleInputChange(section, 'outrosIdentificacao', e.target.value)}
                                        />
                                    )}
                                    {field.name === 'divulgacao' && (
                                        <input
                                            type="text"
                                            placeholder="Outros"
                                            value={formData[section].outrosDivulgacao || ''}
                                            onChange={(e) => handleInputChange(section, 'outrosDivulgacao', e.target.value)}
                                        />
                                    )}
                                </div>
                            ) : field.type === 'array' ? (
                                <div>
                                    {formData[section][field.name].map((item, index) => (
                                        <div key={index} className="array-item">
                                            {field.subFields.map(subField => (
                                                <input
                                                    key={subField.name}
                                                    type={subField.type || 'text'}
                                                    placeholder={subField.label}
                                                    value={item[subField.name] || ''}
                                                    onChange={(e) => handleInputChange(section, field.name, e.target.value, index, subField.name)}
                                                />
                                            ))}
                                            <button onClick={() => removeItem(section, field.name, index)}>Remover</button>
                                        </div>
                                    ))}
                                    <button onClick={() => addItem(section, field.name)}>Adicionar</button>
                                </div>
                            ) : (
                                <input
                                    type={field.type || 'text'}
                                    value={formData[section][field.name] || ''}
                                    onChange={(e) => handleInputChange(section, field.name, e.target.value)}
                                    disabled={field.name === 'cnpj' && !isCNPJEditable}
                                />
                            )}
                        </>
                    )}
                </div>
            ))}
            <button onClick={() => saveForm(section)}>Salvar</button>
        </div>
    );
// Campos para cada seção
const sections = {
    'info-proponente': [
        { name: 'cnpj', label: 'CNPJ', type: 'text' },
        { name: 'nomeProponente', label: 'Nome do Proponente', type: 'text' },
        { name: 'nomeDirigente',
                label: 'Nome do Dirigente (Presidente)',
                customRender: (formData, handleInputChange, isCNPJEditable) => (
                    <label className="block">
                        <span className="text-red-500">*</span> Nome do Dirigente (Presidente):
                        <input
                            type="text"
                            className="w-full p-2 border rounded"
                            value={formData.proponente.nomeDirigente}
                            onChange={(e) => handleInputChange('proponente', 'nomeDirigente', e.target.value)}
                            readOnly={!isCNPJEditable}
                            required
                        />
                    </label>
                ) },
        { name: 'telefones', label: 'Telefones', type: 'text' },
        { name: 'email', label: 'E-mail', type: 'email' },
        { name: 'numeroProposta', label: 'Número da Proposta', type: 'text' },
        { name: 'responsavelNome', label: 'Responsável - Nome', type: 'text' },
        { name: 'responsavelEmail', label: 'Responsável - E-mail', type: 'email' },
        { name: 'responsavelVinculo', label: 'Responsável - Vínculo', type: 'text' },
        { name: 'responsavelTelefones', label: 'Responsável - Telefones', type: 'text' },
        { name: 'dimensaoProjeto', label: 'Dimensão do Projeto', type: 'select', options: ['Projeto Educacional', 'Projeto de Participação'] },
        { name: 'uf', label: 'UF', type: 'select', options: ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'] },
        {
            name: 'cidade',
            label: 'Cidade',
            type: 'select',
            options: municipios.map(mun => ({ value: mun.id, label: mun.nome }))
        },
        { name: 'idh', label: 'IDH', type: 'text' },
        { name: 'anoIDH', label: 'Ano do IDH', type: 'text' },
        { name: 'numHabitantes', label: 'Número de Habitantes', type: 'text' },
        { name: 'anoHabitantes', label: 'Ano dos Habitantes', type: 'text' },
        { name: 'temParceria', label: 'Tem Parceria?', type: 'select', options: ['sim', 'nao'] },
        { name: 'numParcerias', label: 'Número de Parcerias', type: 'text' },
        { name: 'temPublicidade', label: 'Tem Publicidade?', type: 'select', options: ['sim', 'nao'] },
        { name: 'publicidadeSite', label: 'Site da Publicidade', type: 'text' },
        { name: 'artigo2', label: 'Artigo 2º', type: 'text' },
        { name: 'artigo33I', label: 'Artigo 33, Inciso I', type: 'text' },
        { name: 'artigo33III', label: 'Artigo 33, Inciso III', type: 'text' }
    ],
    'dados-projeto': [
        { name: 'objetoProjeto', label: 'Objeto do Projeto', type: 'text' },
        { name: 'publicoAlvo', label: 'Público-Alvo', type: 'checkbox', options: ['crianças', 'adolescentes', 'jovens', 'adultos', 'idosos'] },
        { name: 'quantidadeNucleos', label: 'Quantidade de Núcleos', type: 'number' },
        { name: 'publicoDireto', label: 'Público Direto', type: 'number' },
        { name: 'faixaEtaria', label: 'Faixa Etária', type: 'text' },
        { name: 'publicoIndireto', label: 'Público Indireto', type: 'number' },
        { name: 'periodoEstruturacao', label: 'Período de Estruturação', type: 'number' },
        { name: 'periodoExecucao', label: 'Período de Execução', type: 'number' },
        { name: 'vigenciaTotal', label: 'Vigência Total', type: 'number' },
        { name: 'localidadeNucleos', label: 'Localidade dos Núcleos', type: 'text' },
        {
            name: 'modalidades',
            label: 'Modalidades',
            type: 'array',
            subFields: [{ name: 'modalidade', label: 'Modalidade', type: 'text' }]
        },
        { name: 'valorConcedente', label: 'Valor do Concedente', type: 'text' },
        { name: 'valorContrapartida', label: 'Valor da Contrapartida', type: 'text' },
        { name: 'valorGlobal', label: 'Valor Global', type: 'text' }
    ],
    'info-projeto': [
        { name: 'tipoNucleo', label: 'Tipo de Núcleo', type: 'checkbox', options: ['escola pública', 'praça pública', 'quadra pública', 'espaço comunitário'] },
        { name: 'identificacao', label: 'Identificação', type: 'checkbox', options: ['Faixas', 'Banners', 'Placa', 'Outros'] },
        { name: 'divulgacao', label: 'Divulgação', type: 'checkbox', options: ['Carros ou bicicletas de som', 'Cartazes', 'Faixas', 'Banners', 'Jornais', 'Panfletos', 'Folder', 'Rádios', 'Redes Sociais', 'Outros'] },
        { name: 'custeioDivulgacao', label: 'Custeio da Divulgação', type: 'text' },
        { name: 'quantidadeConjuntosUniforme', label: 'Quantidade de Conjuntos de Uniforme', type: 'number' },
        {
            name: 'gradeHoraria',
            label: 'Grade Horária',
            type: 'array',
            subFields: [
                { name: 'nucleoLocalidade', label: 'Núcleo (Localidade)', type: 'text' },
                { name: 'modalidadesNucleo', label: 'Modalidades', type: 'text' },
                { name: 'gradeHorariaDescricao', label: 'Grade Horária', type: 'text' }
            ]
        },
        {
            name: 'recursosHumanos',
            label: 'Recursos Humanos',
            type: 'array',
            subFields: [
                { name: 'funcaoRH', label: 'Função', type: 'text' },
                { name: 'quantidadeRH', label: 'Quantidade', type: 'number' },
                { name: 'atribuicaoRH', label: 'Atribuição', type: 'text' },
                { name: 'cargaHorariaRH', label: 'Carga Horária', type: 'text' },
                { name: 'periodoRH', label: 'Período', type: 'text' }
            ]
        },
        {
            name: 'materiais',
            label: 'Materiais',
            type: 'array',
            subFields: [
                { name: 'modalidadeMaterial', label: 'Modalidade', type: 'text' },
                { name: 'material', label: 'Material', type: 'text' },
                { name: 'tipoAquisicao', label: 'Aquisição/Locação', type: 'select', options: ['Aquisição', 'Locação'] },
                { name: 'especificacaoMaterial', label: 'Especificação', type: 'text' },
                { name: 'justificativaMaterial', label: 'Justificativa', type: 'text' }
            ]
        },
        {
            name: 'uniformes',
            label: 'Uniformes',
            type: 'array',
            subFields: [
                { name: 'modalidadeUniforme', label: 'Modalidade', type: 'text' },
                { name: 'itemUniforme', label: 'Item', type: 'text' },
                { name: 'especificacaoUniforme', label: 'Especificação', type: 'text' }
            ]
        },
        { name: 'eventosSelecionados', label: 'Eventos', type: 'checkbox', options: ['Evento de Abertura', 'Evento de Encerramento'] },
        { name: 'abrangenciaEventos', label: 'Abrangência dos Eventos', type: 'select', options: ['Por Projeto', 'Por Núcleo'] },
        { name: 'detalhamentoModalidades', label: 'Detalhamento das Modalidades', type: 'text' }
    ]
};
    return (
                <div className="min-h-screen flex flex-col">
                    <header className="bg-blue-900 text-white p-4 flex justify-between items-center fixed w-full top-0 z-10 shadow-md">
                        <h1 className="text-lg font-bold">Projeto Técnico Pedagógico- Projeto Esportivo</h1>
                        <p>Ministério do Esporte</p>
                    </header>

                    <main className="flex-1 max-w-6xl mx-auto p-6 mt-20 bg-white rounded-lg shadow-lg">
                        <div className="flex flex-wrap gap-2 mb-6">
                            <button
                                className={`px-4 py-2 rounded ${activeTab === 'info-proponente' ? 'bg-blue-900 text-white' : 'bg-gray-200'}`}
                                onClick={() => setActiveTab('info-proponente')}
                            >
                                1. Informações do Proponente
                            </button>
                            <button
                                className={`px-4 py-2 rounded ${activeTab === 'dados-projeto' ? 'bg-blue-900 text-white' : 'bg-gray-200'}`}
                                onClick={() => setActiveTab('dados-projeto')}
                            >
                                2. Dados do Projeto
                            </button>
                            <button
                                className={`px-4 py-2 rounded ${activeTab === 'info-projeto' ? 'bg-blue-900 text-white' : 'bg-gray-200'}`}
                                onClick={() => setActiveTab('info-projeto')}
                            >
                                3. Informações do Projeto
                            </button>
                        </div>

                        {activeTab === 'info-proponente' && (
                        <div className="space-y-6">
                          <fieldset className="border p-4 rounded">
                            <legend className="text-blue-900 font-bold">1.1 Identificação do Proponente</legend>
                            <div className="space-y-4">
                                {/* Campo para escolher Convênio ou Termo de Fomento */}
                                <label className="block">
                                    <span className="text-red-500">*</span> Tipo de Parceria:
                                    <div className="flex gap-4 mt-2">
                                        <label className="flex items-center">
                                            <input
                                                type="radio"
                                                name="tipoParceria"
                                                value="Convênio"
                                                checked={formData.proponente.tipoParceria === 'Convênio'}
                                                onChange={(e) => {
                                                    handleInputChange('proponente', 'tipoParceria', e.target.value);
                                                    if (e.target.value === 'Convênio') {
                                                        setFormData((prev) => ({
                                                            ...prev,
                                                            proponente: {
                                                                ...prev.proponente,
                                                                artigo2: 'Não se Aplica',
                                                                artigo33I: 'Não se Aplica',
                                                                artigo33III: 'Não se Aplica',
                                                            },
                                                        }));
                                                    } else {
                                                        setFormData((prev) => ({
                                                            ...prev,
                                                            proponente: {
                                                                ...prev.proponente,
                                                                artigo2: '',
                                                                artigo33I: '',
                                                                artigo33III: '',
                                                            },
                                                        }));
                                                    }
                                                }}
                                                required
                                            />
                                            <span className="ml-2">Convênio</span>
                                        </label>
                                        <label className="flex items-center">
                                            <input
                                                type="radio"
                                                name="tipoParceria"
                                                value="Termo de Fomento"
                                                checked={formData.proponente.tipoParceria === 'Termo de Fomento'}
                                                onChange={(e) => handleInputChange('proponente', 'tipoParceria', e.target.value)}
                                                required
                                            />
                                            <span className="ml-2">Termo de Fomento</span>
                                        </label>
                                    </div>
                                </label>

                                <label className="block">
                                    <span className="text-red-500">*</span> CNPJ Proponente:
                                    <input
                                        type="text"
                                        className="w-full p-2 border rounded"
                                        value={formData.proponente.cnpj}
                                        onChange={(e) => handleInputChange('proponente', 'cnpj', formatarCNPJ(e.target.value))}
                                        placeholder="00.000.000/0000-00"
                                        maxLength="18"
                                        required
                                    />
                                </label>
                                <label className="block">
                                    <span className="text-red-500">*</span> Nome Proponente:
                                    <input
                                        type="text"
                                        className="w-full p-2 border rounded"
                                        value={formData.proponente.nomeProponente}
                                        onChange={(e) => handleInputChange('proponente', 'nomeProponente', e.target.value)}
                                        readOnly={!isCNPJEditable}
                                        required
                                    />
                                </label>
                                <label className="block">
                                    <span className="text-red-500">*</span> Nome do Dirigente (Presidente):
                                    <input
                                        type="text"
                                        className="w-full p-2 border rounded"
                                        value={formData.proponente.nomeDirigente}
                                        onChange={(e) => handleInputChange('proponente', 'nomeDirigente', e.target.value)}
                                        readOnly={!isCNPJEditable}
                                        required
                                    />
                                </label>
                                <label className="block">
                                    <span className="text-red-500">*</span> Telefone(s) de contato com DDD:
                                    <div className="flex flex-wrap gap-2">
                                        {formData.proponente.telefones.map((tel, index) => (
                                            <div key={index} className="flex items-center gap-2">
                                                <input
                                                    type="text"
                                                    className="p-2 border rounded flex-1 min-w-[200px]"
                                                    value={tel}
                                                    onChange={(e) => {
                                                        const newTelefones = [...formData.proponente.telefones];
                                                        newTelefones[index] = formatarTelefone(e.target.value);
                                                        handleInputChange('proponente', 'telefones', newTelefones);
                                                    }}
                                                    placeholder="(00) 00000-0000"
                                                    maxLength="15"
                                                    required
                                                />
                                                {index > 0 && (
                                                    <button
                                                        type="button"
                                                        className="bg-red-500 text-white px-2 py-1 rounded"
                                                        onClick={() => {
                                                            const newTelefones = formData.proponente.telefones.filter((_, i) => i !== index);
                                                            handleInputChange('proponente', 'telefones', newTelefones);
                                                        }}
                                                    >
                                                        <i className="fas fa-trash"></i>
                                                    </button>
                                                )}
                                            </div>
                                        ))}
                                        <button
                                            type="button"
                                            className="bg-green-500 text-white px-4 py-2 rounded"
                                            onClick={() => handleInputChange('proponente', 'telefones', [...formData.proponente.telefones, ''])}
                                        >
                                            Adicionar Telefone
                                        </button>
                                    </div>
                                </label>
                                <label className="block">
                                    <span className="text-red-500">*</span> E-mail:
                                    <input
                                        type="email"
                                        className="w-full p-2 border rounded"
                                        value={formData.proponente.email}
                                        onChange={(e) => handleInputChange('proponente', 'email', e.target.value)}
                                        required
                                    />
                                </label>
                                <label className="block">
                                    <span className="text-red-500">*</span> Número da Proposta (Plataforma Transferegov):
                                    <input
                                        type="text"
                                        className="w-full p-2 border rounded"
                                        value={formData.proponente.numeroProposta}
                                        onChange={(e) => handleInputChange('proponente', 'numeroProposta', e.target.value)}
                                        required
                                    />
                                </label>
                                <label className="block">
                                    <span className="text-red-500">*</span> Emenda Parlamentar:
                                    <input
                                        type="text"
                                        className="w-full p-2 border rounded"
                                        value={formData.proponente.emendaParlamentar}
                                        onChange={(e) => {
                                            const value = e.target.value.replace(/\D/g, ''); // Remove tudo que não for número
                                            if (value.length <= 8) {
                                                handleInputChange('proponente', 'emendaParlamentar', value);
                                            }
                                        }}
                                        placeholder=""
                                        maxLength="8"
                                        required
                                    />
                                </label>
                                <label className="block">
                                    <span className="text-red-500">*</span> GND - Material de Consumo e Permanente:
                                    <p className="italic text-gray-600 mb-2">
                                        Selecione as opções aplicáveis (obrigatório selecionar pelo menos uma):
                                    </p>
                                    <div className="flex flex-col gap-4">
                                        <label className="flex items-center">
                                            <input
                                                type="checkbox"
                                                value="GND3"
                                                checked={formData.proponente.gnd?.includes('GND3') || false}
                                                onChange={(e) => {
                                                    const updatedGnd = e.target.checked
                                                        ? [...(formData.proponente.gnd || []), 'GND3']
                                                        : (formData.proponente.gnd || []).filter(item => item !== 'GND3');
                                                    handleInputChange('proponente', 'gnd', updatedGnd);
                                                }}
                                                required={!formData.proponente.gnd?.length} // Requer pelo menos uma seleção
                                            />
                                            <span className="ml-2">GND3 - Material de Consumo</span>
                                        </label>
                                        <p className="italic text-gray-600 ml-6">
                                            Material de Consumo, aquele que, em razão de seu uso corrente e da definição da Lei n. 4.320/64, 
                                            perde normalmente sua identidade física e/ou tem sua utilização limitada a dois anos.
                                        </p>
                                        <label className="flex items-center">
                                            <input
                                                type="checkbox"
                                                value="GND4"
                                                checked={formData.proponente.gnd?.includes('GND4') || false}
                                                onChange={(e) => {
                                                    const updatedGnd = e.target.checked
                                                        ? [...(formData.proponente.gnd || []), 'GND4']
                                                        : (formData.proponente.gnd || []).filter(item => item !== 'GND4');
                                                    handleInputChange('proponente', 'gnd', updatedGnd);
                                                }}
                                                required={!formData.proponente.gnd?.length} // Requer pelo menos uma seleção
                                            />
                                            <span className="ml-2">GND4 - Material Permanente</span>
                                        </label>
                                        <p className="italic text-gray-600 ml-6">
                                            Material Permanente, aquele que, em razão de seu uso corrente, não perde a sua identidade física, 
                                            e/ou tem uma durabilidade superior a dois anos.
                                        </p>
                                    </div>
                                </label>
                            </div>
                        </fieldset>

                            <fieldset className="border p-4 rounded">
                            <legend className="text-blue-900 font-bold">1.2 Responsável pela Elaboração do Projeto Técnico</legend>
                            <div className="space-y-4">
                                <label className="block">
                                <span className="text-red-500">*</span> Nome:
                                <input
                                    type="text"
                                    className="w-full p-2 border rounded"
                                    value={formData.proponente.responsavelNome}
                                    onChange={(e) => handleInputChange('proponente', 'responsavelNome', e.target.value)}
                                    required
                                />
                                </label>
                                <label className="block">
                                <span className="text-red-500">*</span> E-mail:
                                <input
                                    type="email"
                                    className="w-full p-2 border rounded"
                                    value={formData.proponente.responsavelEmail}
                                    onChange={(e) => handleInputChange('proponente', 'responsavelEmail', e.target.value)}
                                    required
                                />
                                </label>
                                <label className="block">
                                <span className="text-red-500">*</span> Vínculo com a Entidade (Cargo/Função):
                                <input
                                    type="text"
                                    className="w-full p-2 border rounded"
                                    value={formData.proponente.responsavelVinculo}
                                    onChange={(e) => handleInputChange('proponente', 'responsavelVinculo', e.target.value)}
                                    required
                                />
                                </label>
                                <label className="block">
                                <span className="text-red-500">*</span> Telefone(s) de contato com DDD:
                                <div className="flex flex-wrap gap-2">
                                    {formData.proponente.responsavelTelefones.map((tel, index) => (
                                    <div key={index} className="flex items-center gap-2">
                                        <input
                                        type="text"
                                        className="p-2 border rounded flex-1 min-w-[200px]"
                                        value={tel}
                                        onChange={(e) => {
                                            const newTelefones = [...formData.proponente.responsavelTelefones];
                                            newTelefones[index] = formatarTelefone(e.target.value);
                                            handleInputChange('proponente', 'responsavelTelefones', newTelefones);
                                        }}
                                        placeholder="(00) 00000-0000"
                                        maxLength="15"
                                        required
                                        />
                                        {index > 0 && (
                                        <button
                                            type="button"
                                            className="bg-red-500 text-white px-2 py-1 rounded"
                                            onClick={() => {
                                            const newTelefones = formData.proponente.responsavelTelefones.filter((_, i) => i !== index);
                                            handleInputChange('proponente', 'responsavelTelefones', newTelefones);
                                            }}
                                        >
                                            <i className="fas fa-trash"></i>
                                        </button>
                                        )}
                                    </div>
                                    ))}
                                    <button
                                    type="button"
                                    className="bg-green-500 text-white px-4 py-2 rounded"
                                    onClick={() => handleInputChange('proponente', 'responsavelTelefones', [...formData.proponente.responsavelTelefones, ''])}
                                    >
                                    Adicionar Telefone
                                    </button>
                                </div>
                                </label>
                            </div>
                            </fieldset>

                            <fieldset className="border p-4 rounded">
                        <legend className="text-blue-900 font-bold">1.3 Dimensão do Projeto</legend>
                        <div className="space-y-2">
                            <label className="flex items-center">
                            <input
                                type="radio"
                                name="dimensaoProjeto"
                                value="Projeto Educacional"
                                checked={formData.proponente.dimensaoProjeto === 'Projeto Educacional'}
                                onChange={(e) => handleInputChange('proponente', 'dimensaoProjeto', e.target.value)}
                                required
                            />
                            <span className="ml-2">Projeto Educacional</span>
                            </label>
                            <label className="flex items-center">
                            <input
                                type="radio"
                                name="dimensaoProjeto"
                                value="Projeto de Participação"
                                checked={formData.proponente.dimensaoProjeto === 'Projeto de Participação'}
                                onChange={(e) => handleInputChange('proponente', 'dimensaoProjeto', e.target.value)}
                            />
                            <span className="ml-2">Projeto de Participação</span>
                            </label>
                        </div>
                        <p className="italic text-gray-600 mt-2">
                            {formData.proponente.dimensaoProjeto === 'Projeto Educacional'
                            ? 'Oferta oportunidades de acesso à prática esportiva em suas diversas manifestações por meio de ações planejadas, inclusivas e lúdicas para crianças e adolescentes.'
                            : formData.proponente.dimensaoProjeto === 'Projeto de Participação'
                            ? 'Caracteriza-se pela vivência do esporte com autodeterminação a partir do conhecimento esportivo adquirido.'
                            : 'Selecione uma opção para ver a descrição.'}
                        </p>
                        </fieldset>

                            <fieldset className="border p-4 rounded">
                            <legend className="text-blue-900 font-bold">1.4 Localidade – Índice de Desenvolvimento Humano</legend>
                            <div className="space-y-4">
                                <label className="block">
                                <span className="text-red-500">*</span> UF:
                                <select
                                    className="w-32 p-2 border rounded"
                                    value={formData.proponente.uf}
                                    onChange={(e) => handleInputChange('proponente', 'uf', e.target.value)}
                                    required
                                >
                                    <option value="">Selecione</option>
                                    {['AC', 'AL', 'AM', 'AP', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MG', 'MS', 'MT', 'PA', 'PB', 'PE', 'PI', 'PR', 'RJ', 'RN', 'RO', 'RR', 'RS', 'SC', 'SE', 'SP', 'TO'].map(uf => (
                                    <option key={uf} value={uf}>{uf}</option>
                                    ))}
                                </select>
                                </label>
                                <label className="block">
                                <span className="text-red-500">*</span> Cidade:
                                <select
                                    value={formData.proponente.cidade}
                                    onChange={(e) => handleInputChange('proponente', 'cidade', e.target.value)}
                                    className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-900 focus:border-blue-900"
                                    disabled={!formData.proponente.uf}
                                >
                                    <option value="">Selecione</option>
                                    {municipios.map(mun => (
                                    <option key={mun.id} value={mun.id}>{mun.nome}</option>
                                    ))}
                                </select>
                                </label>
                                <label className="block">
                                <span className="text-red-500">*</span> IDH:
                                <input
                                    type="text"
                                    className="w-full p-2 border rounded bg-gray-100"
                                    value={formData.proponente.idh}
                                    onChange={(e) => handleInputChange('proponente', 'idh', e.target.value)}
                                    required
                                />
                                </label>
                                <label className="block">
                                <span className="text-red-500">*</span> Ano de Referência:
                                <input
                                    type="number"
                                    className="w-full p-2 border rounded bg-gray-100"
                                    value={formData.proponente.anoIDH}
                                    onChange={(e) => handleInputChange('proponente', 'anoIDH', e.target.value)}
                                    required
                                />
                                </label>
                            </div>
                            </fieldset>

                            <fieldset className="border p-4 rounded">
                            <legend className="text-blue-900 font-bold">1.5 População - Característica Demográfica</legend>
                            <div className="space-y-4">
                                <label className="block">
                                <span className="text-red-500">*</span> Nº de habitantes:
                                <input
                                    type="text"
                                    className="w-full p-2 border rounded bg-gray-100"
                                    value={formData.proponente.numHabitantes}
                                    onChange={(e) => handleInputChange('proponente', 'numHabitantes', e.target.value)}
                                    required
                                />
                                </label>
                                <label className="block">
                                <span className="text-red-500">*</span> Ano de referência:
                                <input
                                    type="number"
                                    className="w-full p-2 border rounded bg-gray-100"
                                    value={formData.proponente.anoHabitantes}
                                    onChange={(e) => handleInputChange('proponente', 'anoHabitantes', e.target.value)}
                                    required
                                />
                                </label>
                            </div>
                            </fieldset>

                            <fieldset className="border p-4 rounded">
                            <legend className="text-blue-900 font-bold">1.6 Informações sobre a Entidade Proponente</legend>
                            <div className="space-y-4">
                                <div>
                                <label>A Entidade já celebrou parcerias com o Ministério do Esporte?</label>
                                <div className="flex gap-4">
                                    <label className="flex items-center">
                                    <input
                                        type="radio"
                                        name="temParceria"
                                        value="sim"
                                        checked={formData.proponente.temParceria === 'sim'}
                                        onChange={(e) => handleInputChange('proponente', 'temParceria', e.target.value)}
                                    />
                                    <span className="ml-2">Sim</span>
                                    </label>
                                    <label className="flex items-center">
                                    <input
                                        type="radio"
                                        name="temParceria"
                                        value="nao"
                                        checked={formData.proponente.temParceria === 'nao'}
                                        onChange={(e) => handleInputChange('proponente', 'temParceria', e.target.value)}
                                    />
                                    <span className="ml-2">Não</span>
                                    </label>
                                </div>
                                {formData.proponente.temParceria === 'sim' && (
                                    <label className="block mt-2">
                                    Nº de parcerias:
                                    <input
                                        type="number"
                                        className="w-full p-2 border rounded"
                                        value={formData.proponente.numParcerias}
                                        onChange={(e) => handleInputChange('proponente', 'numParcerias', e.target.value)}
                                        min="0"
                                    />
                                    </label>
                                )}
                                </div>
                                <div>
                                <label>A Entidade já deu publicidade às parcerias celebradas em seu respectivo site?</label>
                                <div className="flex gap-4">
                                    <label className="flex items-center">
                                    <input
                                        type="radio"
                                        name="temPublicidade"
                                        value="sim"
                                        checked={formData.proponente.temPublicidade === 'sim'}
                                        onChange={(e) => handleInputChange('proponente', 'temPublicidade', e.target.value)}
                                    />
                                    <span className="ml-2">Sim</span>
                                    </label>
                                    <label className="flex items-center">
                                    <input
                                        type="radio"
                                        name="temPublicidade"
                                        value="nao"
                                        checked={formData.proponente.temPublicidade === 'nao'}
                                        onChange={(e) => handleInputChange('proponente', 'temPublicidade', e.target.value)}
                                    />
                                    <span className="ml-2">Não</span>
                                    </label>
                                </div>
                                {formData.proponente.temPublicidade === 'sim' && (
                                    <label className="block mt-2">
                                    Site onde foi publicada a publicidade:
                                    <input
                                        type="url"
                                        className="w-full p-2 border rounded"
                                        value={formData.proponente.publicidadeSite}
                                        onChange={(e) => handleInputChange('proponente', 'publicidadeSite', e.target.value)}
                                        placeholder="https://exemplo.com"
                                    />
                                    </label>
                                )}
                                </div>
                            </div>
                            </fieldset>

                            <fieldset className="border p-4 rounded">
                            <legend className="text-blue-900 font-bold">1.7 Informações sobre o Estatuto da Entidade</legend>
                            <div className="space-y-4">
                                {[
                                {
                                    label: 'Análise Estatutária, art. 2º, inciso I, Lei 13.019/2014',
                                    field: 'artigo2',
                                    tooltip:
                                    'Análise Estatutária, art. 2º, inciso I, Lei 13.019/2014: Verificar se a Entidade NÃO distribui entre os seus sócios ou associados, conselheiros, diretores, empregados, doadores ou terceiros eventuais resultados, sobras, excedentes operacionais, brutos ou líquidos, dividendos, isenções de qualquer natureza, participações ou parcelas do seu patrimônio, auferidos mediante o exercício de suas atividades, e que os aplique integralmente na consecução do respectivo objeto social, de forma imediata ou por meio da constituição de fundo patrimonial ou fundo de reserva.',
                                },
                                {
                                    label: 'Análise Estatutária, art. 33, inciso I, Lei 13.019/2014',
                                    field: 'artigo33I',
                                    tooltip:
                                    'Análise Estatutária, art. 33, inciso I, Lei 13.019/2014: Verificar se a Entidade POSSUI objetivos voltados à promoção de atividades e finalidades de relevância pública e social.',
                                },
                                {
                                    label: 'Análise Estatutária, art. 33, inciso III, Lei 13.019/2014',
                                    field: 'artigo33III',
                                    tooltip:
                                    'Análise Estatutária, art. 33, inciso III, Lei 13.019/2014: Verificar se em caso de dissolução da entidade, o respectivo patrimônio líquido seja transferido a outra pessoa jurídica de igual natureza que preencha os requisitos desta Lei e cujo objeto social seja, preferencialmente, o mesmo da entidade extinta.',
                                },
                                ].map((item, index) => (
                                <label key={index} className="block relative">
                                    <div className="flex items-center">
                                    <span className="text-red-500">*</span>
                                    <span>{item.label}:</span>
                                    <span className="ml-2 cursor-pointer relative group">
                                        <i className="fas fa-info-circle text-blue-600"></i>
                                        <div className="absolute left-0 top-6 w-80 p-2 bg-blue-900 text-white text-xs rounded shadow-lg z-10 hidden group-hover:block">
                                        {item.tooltip}
                                        </div>
                                    </span>
                                    </div>
                                    <input
                                    type="text"
                                    className="w-full p-2 border rounded mt-1"
                                    value={formData.proponente[item.field]}
                                    onChange={(e) => handleInputChange('proponente', item.field, e.target.value)}
                                    placeholder="Número do artigo"
                                    required
                                    disabled={formData.proponente.tipoParceria === 'Convênio'}
                                    />
                                </label>
                                ))}
                            </div>
                            </fieldset>


                            <div className="flex gap-4">
                            <button
                                className="bg-blue-900 text-white px-4 py-2 rounded hover:bg-blue-800"
                                onClick={() => saveForm('proponente')}
                            >
                                Salvar
                            </button>
                            <button
                                className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                                onClick={() => {
                                setFormData((prev) => ({
                                    ...prev,
                                    proponente: {
                                    tipoParceria: '',
                                    cnpj: '',
                                    nomeProponente: '',
                                    nomeDirigente: '',
                                    telefones: [''],
                                    email: '',
                                    numeroProposta: '',
                                    emendaParlamentar: '',
                                    gnd: [],
                                    responsavelNome: '',
                                    responsavelEmail: '',
                                    responsavelVinculo: '',
                                    responsavelTelefones: [''],
                                    dimensaoProjeto: '',
                                    uf: '',
                                    cidade: '',
                                    idh: '',
                                    anoIDH: '',
                                    numHabitantes: '',
                                    anoHabitantes: '',
                                    temParceria: '',
                                    numParcerias: '',
                                    temPublicidade: '',
                                    publicidadeSite: '',
                                    artigo2: '',
                                    artigo33I: '',
                                    artigo33III: '',
                                    },
                                }));
                                setIsCNPJEditable(true);
                                setMunicipios([]);
                                localStorage.removeItem('formData');
                                alert('Formulário limpo com sucesso!');
                                }}
                            >
                                Limpar
                            </button>
                            </div>
                        </div>
                        )}
                        {activeTab === 'dados-projeto' && (
                            <div className="space-y-6">
                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">2.1 Objeto</legend>
                                    <div className="space-y-4">
                                        <label className="block">
                                            <span className="text-red-500">*</span> Implementação e desenvolvimento do Projeto:
                                            <textarea
                                                className="w-full p-2 border rounded"
                                                value={formData.dadosProjeto.objetoProjeto}
                                                onChange={(e) => handleInputChange('dadosProjeto', 'objetoProjeto', e.target.value)}
                                                required
                                                rows="4"
                                            />
                                        </label>
                                    </div>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">2.2 Objetivo Geral</legend>
                                    <p className="italic text-gray-600">
                                        Promover a inclusão social e a melhoria da qualidade de vida por meio das práticas esportivas e de lazer como ferramenta de transformação social, utilizando o esporte como instrumento de formação esportiva, disciplinar e valores fundamentais, através do estímulo do bem-estar físico, psicológico dos beneficiados envolvidos.
                                    </p>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">2.3 Objetivos Específicos</legend>
                                    <div className="space-y-4">
                                        <label className="block">
                                            Público-alvo:
                                            <div className="flex flex-wrap gap-4">
                                                {['crianças', 'adolescentes', 'jovens', 'adultos', 'idosos'].map(opt => (
                                                    <label key={opt} className="flex items-center">
                                                        <input
                                                            type="checkbox"
                                                            value={opt}
                                                            checked={formData.dadosProjeto.publicoAlvo.includes(opt)}
                                                            onChange={(e) => {
                                                                const updatedPublico = e.target.checked
                                                                    ? [...formData.dadosProjeto.publicoAlvo, e.target.value]
                                                                    : formData.dadosProjeto.publicoAlvo.filter(item => item !== e.target.value);
                                                                handleInputChange('dadosProjeto', 'publicoAlvo', updatedPublico);
                                                            }}
                                                        />
                                                        <span className="ml-2">{opt.charAt(0).toUpperCase() + opt.slice(1)}</span>
                                                    </label>
                                                ))}
                                            </div>
                                        </label>
                                        <label className="block">
                                            Número de núcleos ajustado com base na dimensão do projeto:
                                            <input
                                                type="number"
                                                className="w-full p-2 border rounded"
                                                value={formData.dadosProjeto.quantidadeNucleos}
                                                onChange={(e) => handleInputChange('dadosProjeto', 'quantidadeNucleos', e.target.value)}
                                                min="1"
                                            />
                                        </label>
                                    </div>
                                    <div className="mt-4">
                                        <h4 className="font-bold">Objetivos específicos gerados:</h4>
                                        <ul className="list-disc pl-5">
                                            {getObjetivosEspecificos().map((obj, index) => (
                                                <li key={index}>{obj}</li>
                                            ))}
                                        </ul>
                                    </div>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">2.4 Público-Alvo</legend>
                                    <div className="space-y-4">
                                        <p className="italic text-gray-600">Deverá ser comprovado no acompanhamento e relatório de cumprimento do objeto.</p>
                                        <p className="italic text-gray-600">Descrever quantitativamente.</p>
                                        <label className="block">
                                            Público direto (beneficiários):
                                            <input
                                                type="number"
                                                className="w-full p-2 border rounded"
                                                value={formData.dadosProjeto.publicoDireto}
                                                onChange={(e) => handleInputChange('dadosProjeto', 'publicoDireto', e.target.value)}
                                                min="1"
                                            />
                                        </label>
                                        <label className="block">
                                            Faixa etária do público direto (a partir de 06 anos, obrigatoriamente):
                                            <input
                                                type="text"
                                                className="w-full p-2 border rounded"
                                                value={formData.dadosProjeto.faixaEtaria}
                                                onChange={(e) => handleInputChange('dadosProjeto', 'faixaEtaria', e.target.value)}
                                            />
                                        </label>
                                        <label className="block">
                                            Público indireto (calculado automaticamente como 3x o público direto):
                                            <input
                                                type="text"
                                                className="w-full p-2 border rounded bg-gray-100"
                                                value={formData.dadosProjeto.publicoIndireto}
                                                readOnly
                                            />
                                        </label>
                                    </div>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">2.5 Vigência do Projeto</legend>
                                    <div className="space-y-4">
                                        <label className="block">
                                            <span className="text-red-500">*</span> Período de Estruturação (em meses):
                                            <input
                                                type="number"
                                                className="w-full p-2 border rounded"
                                                value={formData.dadosProjeto.periodoEstruturacao}
                                                onChange={(e) => handleInputChange('dadosProjeto', 'periodoEstruturacao', e.target.value)}
                                                min="1"
                                                max="2"
                                                required
                                            />
                                            <p className="italic text-gray-600">Em caso de Termo de Fomento, a previsão é de até 2 meses de pagamento de RH na estruturação – Portaria MEsp nº 102/2024.</p>
                                        </label>
                                        <label className="block">
                                            <span className="text-red-500">*</span> Período de Execução (em meses):
                                            <input
                                                type="number"
                                                className="w-full p-2 border rounded"
                                                value={formData.dadosProjeto.periodoExecucao}
                                                onChange={(e) => handleInputChange('dadosProjeto', 'periodoExecucao', e.target.value)}
                                                min="6"
                                                required
                                            />
                                            <p className="italic text-gray-600">No mínimo 6 meses.</p>
                                        </label>
                                        <label className="block">
                                            Vigência Total (calculada automaticamente):
                                            <input
                                                type="text"
                                                className="w-full p-2 border rounded bg-gray-100"
                                                value={formData.dadosProjeto.vigenciaTotal}
                                                readOnly
                                            />
                                        </label>
                                    </div>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">2.6 Núcleos</legend>
                                    <div className="space-y-4">
                                        <label className="block">
                                            <span className="text-red-500">*</span> Quantidade de núcleos:
                                            <input
                                                type="number"
                                                className="w-full p-2 border rounded"
                                                value={formData.dadosProjeto.quantidadeNucleos}
                                                onChange={(e) => handleInputChange('dadosProjeto', 'quantidadeNucleos', e.target.value)}
                                                min="1"
                                                required
                                            />
                                        </label>
                                        <label className="block">
                                            <span className="text-red-500">*</span> Localidade:
                                            <input
                                                type="text"
                                                className="w-full p-2 border rounded"
                                                value={formData.dadosProjeto.localidadeNucleos}
                                                onChange={(e) => handleInputChange('dadosProjeto', 'localidadeNucleos', e.target.value)}
                                                required
                                            />
                                        </label>
                                    </div>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">2.7 Modalidades a serem Desenvolvidas</legend>
                                    <div className="space-y-4">
                                        {formData.dadosProjeto.modalidades.map((mod, index) => (
                                            <div key={index} className="flex items-center gap-2">
                                                <label className="block flex-1">
                                                    Modalidade {index + 1}:
                                                    <input
                                                        type="text"
                                                        className="w-full p-2 border rounded"
                                                        value={mod.modalidade}
                                                        onChange={(e) => {
                                                            const newModalidades = [...formData.dadosProjeto.modalidades];
                                                            newModalidades[index] = { modalidade: e.target.value };
                                                            handleInputChange('dadosProjeto', 'modalidades', newModalidades);
                                                        }}
                                                        required
                                                    />
                                                </label>
                                                {formData.dadosProjeto.modalidades.length > 1 && (
                                                    <button
                                                        type="button"
                                                        className="bg-red-500 text-white px-2 py-1 rounded"
                                                        onClick={() => removeItem('dadosProjeto', 'modalidades', index)}
                                                    >
                                                        <i className="fas fa-trash"></i>
                                                    </button>
                                                )}
                                            </div>
                                        ))}
                                        <button
                                            type="button"
                                            className="bg-green-500 text-white px-4 py-2 rounded"
                                            onClick={() => addItem('dadosProjeto', 'modalidades')}
                                        >
                                            Adicionar Modalidade
                                        </button>
                                    </div>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">2.8 Cronograma de Execução Físico-Financeira</legend>
                                    <div className="space-y-4">
                                        <label className="block">
                                            <span className="text-red-500">*</span> Valor do Concedente:
                                            <input
                                                type="text"
                                                className="w-full p-2 border rounded"
                                                value={formData.dadosProjeto.valorConcedente}
                                                onChange={(e) => handleInputChange('dadosProjeto', 'valorConcedente', e.target.value)}
                                                placeholder="R$ 0,00"
                                                required
                                                onBlur={(e) => {
                                                    const valor = parseMoeda(e.target.value);
                                                    handleInputChange('dadosProjeto', 'valorConcedente', formatarMoeda(valor));
                                                }}
                                            />
                                        </label>
                                        <label className="block">
                                            <span className="text-red-500">*</span> Valor Contrapartida:
                                            <input
                                                type="text"
                                                className="w-full p-2 border rounded"
                                                value={formData.dadosProjeto.valorContrapartida}
                                                onChange={(e) => handleInputChange('dadosProjeto', 'valorContrapartida', e.target.value)}
                                                placeholder="R$ 0,00"
                                                required
                                                onBlur={(e) => {
                                                    const valor = parseMoeda(e.target.value);
                                                    handleInputChange('dadosProjeto', 'valorContrapartida', formatarMoeda(valor));
                                                }}
                                            />
                                        </label>
                                        <label className="block">
                                            Valor Global (calculado automaticamente):
                                            <input
                                                type="text"
                                                className="w-full p-2 border rounded bg-gray-100"
                                                value={formData.dadosProjeto.valorGlobal}
                                                readOnly
                                            />
                                        </label>
                                    </div>
                                </fieldset>

                                <div className="flex gap-4">
                                    <button
                                        className="bg-blue-900 text-white px-4 py-2 rounded hover:bg-blue-800"
                                        onClick={() => saveForm('dadosProjeto')}
                                    >
                                        Salvar
                                    </button>
                                    <button
                                        className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                                        onClick={() => {
                                            setFormData(prev => ({
                                                ...prev,
                                                dadosProjeto: {
                                                    objetoProjeto: '',
                                                    publicoAlvo: [],
                                                    quantidadeNucleos: '',
                                                    publicoDireto: '',
                                                    faixaEtaria: '',
                                                    publicoIndireto: '',
                                                    periodoEstruturacao: '',
                                                    periodoExecucao: '',
                                                    vigenciaTotal: '',
                                                    localidadeNucleos: '',
                                                    modalidades: [{ modalidade: '' }],
                                                    valorConcedente: '',
                                                    valorContrapartida: '',
                                                    valorGlobal: ''
                                                }
                                            }));
                                            localStorage.removeItem('formData');
                                            alert('Formulário limpo com sucesso!');
                                        }}
                                    >
                                        Limpar
                                    </button>
                                </div>
                            </div>
                        )}

                        {activeTab === 'info-projeto' && (
                            <div className="space-y-6">
                                <fieldset className="border p-4 rounded">
                                        <legend className="text-blue-900 font-bold">3.1 Estruturação do Projeto</legend>
                                        <p className="italic text-gray-600 mb-4">
                                            Visa à organização e preparação das condições necessárias para a execução do projeto, garantindo que todas as etapas sejam realizadas de forma eficiente e dentro das diretrizes estabelecidas, conforme a seguir:
                                        </p>
                                        
                                        <div className="space-y-2">
                                            {/* Checkboxes para os itens pré-definidos */}
                                            {[
                                                "Contratação de recursos humanos",
                                                "Contratação de prestação de serviços",
                                                "Aquisição de materiais esportivos",
                                                "Aquisição de uniformes e acessórios para os beneficiários",
                                                "Aquisição dos materiais de identificação e divulgação"
                                            ].map((item, index) => (
                                                <label key={index} className="flex items-center">
                                                    <input
                                                        type="checkbox"
                                                        checked={formData.infoProjeto.estruturacao?.includes(item) || false}
                                                        onChange={(e) => {
                                                            const novosItens = [...(formData.infoProjeto.estruturacao || [])];
                                                            if (e.target.checked) {
                                                                novosItens.push(item);
                                                            } else {
                                                                const index = novosItens.indexOf(item);
                                                                if (index !== -1) novosItens.splice(index, 1);
                                                            }
                                                            handleInputChange('infoProjeto', 'estruturacao', novosItens);
                                                        }}
                                                        className="mr-2"
                                                    />
                                                    <span>{item}</span>
                                                </label>
                                            ))}

                                            {/* Campo "Outros" */}
                                           <div className="flex items-center mt-4">
                                                <label className="flex items-center mr-4">
                                                    <input
                                                        type="checkbox"
                                                        checked={formData.infoProjeto.outrosCheck || false}
                                                        onChange={(e) => {
                                                            handleInputChange('infoProjeto', 'outrosCheck', e.target.checked);
                                                            if (!e.target.checked) {
                                                                handleInputChange('infoProjeto', 'outrosEstruturação', ''); // Limpa o campo ao desmarcar
                                                            }
                                                        }}
                                                        className="mr-2"
                                                    />
                                                    <span>Outros:</span>
                                                </label>
                                                <input
                                                    type="text"
                                                    value={formData.infoProjeto.outrosEstruturação || ''}
                                                    onChange={(e) => handleInputChange('infoProjeto', 'outrosEstruturação', e.target.value)}
                                                    placeholder="Especifique"
                                                    className={`border rounded px-2 py-1 flex-1 ${!formData.infoProjeto.outrosCheck ? 'bg-gray-100' : ''}`}
                                                    disabled={!formData.infoProjeto.outrosCheck}
                                                />
                                            </div>
                                        </div>
                                    </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.2 Implementação</legend>
                                    <div className="space-y-4">
                                        <label className="block">
                                            O(s) núcleo(s) do projeto será(ão) implementado(s) em espaços comunitários:
                                            <div className="flex gap-4">
                                                <label className="flex items-center">
                                                    <input
                                                        type="checkbox"
                                                        name="tipoNucleoPublico"
                                                        checked={formData.infoProjeto.tipoNucleo.includes('públicos')}
                                                        onChange={(e) => {
                                                            const tipos = new Set(formData.infoProjeto.tipoNucleo || []);
                                                            if (e.target.checked) {
                                                                tipos.add('públicos');
                                                            } else {
                                                                tipos.delete('públicos');
                                                            }
                                                            handleInputChange('infoProjeto', 'tipoNucleo', Array.from(tipos));
                                                        }}
                                                    />
                                                    <span className="ml-2">Públicos</span>
                                                </label>
                                                <label className="flex items-center">
                                                    <input
                                                        type="checkbox"
                                                        name="tipoNucleoPrivado"
                                                        checked={formData.infoProjeto.tipoNucleo.includes('privados')}
                                                        onChange={(e) => {
                                                            const tipos = new Set(formData.infoProjeto.tipoNucleo || []);
                                                            if (e.target.checked) {
                                                                tipos.add('privados');
                                                            } else {
                                                                tipos.delete('privados');
                                                            }
                                                            handleInputChange('infoProjeto', 'tipoNucleo', Array.from(tipos));
                                                        }}
                                                    />
                                                    <span className="ml-2">Privados</span>
                                                </label>
                                            </div>
                                        </label>
                                        <p className="italic text-gray-600">
                                            Espaços localizados próximos à comunidade beneficiada.
                                        </p>
                                        <p className="italic text-gray-600">
                                            O(s) núcleo(s) do projeto serão organizados de forma a proporcionar uma experiência positiva e eficiente para os beneficiários. Serão {formData.dadosProjeto.quantidadeNucleos || 'XX'} ({numeroPorExtenso(formData.dadosProjeto.quantidadeNucleos || 'XX')}) núcleos, cada um contará com um número médio de {formData.dadosProjeto.publicoDireto || 'XX'} ({numeroPorExtenso(formData.dadosProjeto.publicoDireto || 'XX')}) beneficiários, divididos em turmas de acordo com a capacidade e modalidade oferecida.
                                        </p>
                                    </div>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.5 Metodologia de Desenvolvimento do Projeto</legend>
                                    <p className="italic text-gray-600">
                                        Este Projeto visa combater o sedentarismo e promover um estilo de vida saudável através da prática regular de atividades físicas e fortalecimento da inclusão social. A implementação deste projeto trará benefícios significativos na qualidade de vida dos beneficiários, visando criar uma comunidade mais ativa e integrada. O projeto terá duração de {formData.dadosProjeto.vigenciaTotal || 'XX'} ({numeroPorExtenso(formData.dadosProjeto.vigenciaTotal || 'XX')}) meses, sendo {formData.dadosProjeto.periodoEstruturacao || 'XX'} ({numeroPorExtenso(formData.dadosProjeto.periodoEstruturacao || 'XX')}) para estruturação e {formData.dadosProjeto.periodoExecucao || 'XX'} ({numeroPorExtenso(formData.dadosProjeto.periodoExecucao || 'XX')}) para execução.
                                    </p>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.5.1 Estrutura das Aulas</legend>
                                    <p className="italic text-gray-600">Cada aula esportiva seguirá uma estrutura padronizada para garantir consistência e qualidade, independentemente da modalidade esportiva. Esta estrutura incluirá:</p>
                                    <ul className="list-decimal pl-5">
                                        <li>Aquecimento: Atividades lúdicas que preparam o corpo e a mente para o exercício, promovendo a circulação sanguínea e reduzindo o risco de lesões.</li>
                                        <li>Instrução Técnica: Foco no desenvolvimento de habilidades técnicas específicas da modalidade, com instruções claras e demonstrações práticas.</li>
                                        <li>Prática Guiada: Exercícios práticos onde os participantes aplicam as habilidades aprendidas sob a supervisão ativa dos instrutores, com feedback imediato.</li>
                                        <li>Jogos ou Competições: Atividades que incentivam a aplicação das habilidades em um contexto de jogo ou competição, promovendo o espírito esportivo e a colaboração.</li>
                                        <li>Intervalo e Socialização: Momento de descanso mais prolongado, permitindo o descanso e interação.</li>
                                        <li>Alongamento e Desaceleração: Encerramento das aulas com atividades leves para baixar a intensidade física e uma sessão de reflexão sobre as lições aprendidas.</li>
                                    </ul>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.5.2 Metodologia de Ensino</legend>
                                    <ul className="list-decimal pl-5">
                                        <li>Aprendizado Baseado em Competências: Focar no desenvolvimento de competências específicas de cada modalidade.</li>
                                        <li>Educação Inclusiva: Adaptação das aulas para atender a diversas necessidades.</li>
                                        <li>Ensino Integrado: Integrar lições de vida, como trabalho em equipe e liderança.</li>
                                        <li>Feedback Construtivo: Fornecer feedback regular e construtivo para encorajar e melhorar o desempenho.</li>
                                    </ul>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.5.3 Detalhamento Específico sobre as Modalidades</legend>
                                    <div className="space-y-4">
                                        <label className="block">
                                            Descreva detalhes específicos sobre as modalidades oferecidas:
                                            <textarea
                                                className="w-full p-2 border rounded"
                                                value={formData.infoProjeto.detalhamentoModalidades}
                                                onChange={(e) => handleInputChange('infoProjeto', 'detalhamentoModalidades', e.target.value)}
                                                rows="6"
                                            />
                                        </label>
                                    </div>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.5.4 Frequência nas Aulas</legend>
                                    <p className="italic text-gray-600">
                                        Será requisito a todos os beneficiários manter frequência mínima de 70% nas aulas. A frequência será monitorada, e beneficiários que não atingirem o percentual mínimo podem ser substituídos. Em casos de faltas frequentes, a vaga será remanejada para outro participante.
                                    </p>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.5.5 Avaliação e Progresso</legend>
                                    <ul className="list-disc pl-5">
                                        <li>Avaliações Regulares: Realizar avaliações periódicas para monitorar o progresso.</li>
                                        <li>Portfólios de Desenvolvimento: Manter registros detalhados do progresso de cada participante.</li>
                                    </ul>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.6 Inscrições</legend>
                                    <p className="italic text-gray-600">
                                        As inscrições deverão ser feitas antes do início do Projeto e alcançar o número de participantes previstos. Caso haja um número inferior de inscritos, serão realizadas ações de divulgação. No caso de menores, as inscrições serão feitas pelos responsáveis legais.
                                    </p>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.7 Eventos</legend>
                                    <div className="space-y-4">
                                        <p className="italic text-gray-600">
                                            Têm como objetivo celebrar o início e o sucesso do projeto, fortalecer o engajamento da comunidade e promover um ambiente seguro. Durante cada evento, serão distribuídos kits lanches aos beneficiados e à equipe técnica.
                                        </p>
                                        <label className="block">
                                            <span className="text-red-500">*</span> Selecione os eventos a serem realizados:
                                            <div className="flex flex-wrap gap-4 mt-2">
                                                <label className="flex items-center">
                                                    <input
                                                        type="checkbox"
                                                        value="Evento de Abertura"
                                                        checked={(formData.infoProjeto.eventosSelecionados || []).includes('Evento de Abertura')}
                                                        onChange={(e) => {
                                                            const updatedEventos = e.target.checked
                                                                ? [...(formData.infoProjeto.eventosSelecionados || []), e.target.value]
                                                                : (formData.infoProjeto.eventosSelecionados || []).filter(item => item !== e.target.value);
                                                            handleInputChange('infoProjeto', 'eventosSelecionados', updatedEventos);
                                                        }}
                                                    />
                                                    <span className="ml-2">Evento de Abertura</span>
                                                </label>
                                                <label className="flex items-center">
                                                    <input
                                                        type="checkbox"
                                                        value="Evento de Encerramento"
                                                        checked={(formData.infoProjeto.eventosSelecionados || []).includes('Evento de Encerramento')}
                                                        onChange={(e) => {
                                                            const updatedEventos = e.target.checked
                                                                ? [...(formData.infoProjeto.eventosSelecionados || []), e.target.value]
                                                                : (formData.infoProjeto.eventosSelecionados || []).filter(item => item !== e.target.value);
                                                            handleInputChange('infoProjeto', 'eventosSelecionados', updatedEventos);
                                                        }}
                                                    />
                                                    <span className="ml-2">Evento de Encerramento</span>
                                                </label>
                                            </div>
                                        </label>
                                        <label className="block">
                                            <span className="text-red-500">*</span> Os eventos serão realizados:
                                            <div className="flex gap-4 mt-2">
                                                <label className="flex items-center">
                                                    <input
                                                        type="radio"
                                                        name="abrangenciaEventos"
                                                        value="Por Projeto"
                                                        checked={formData.infoProjeto.abrangenciaEventos === 'Por Projeto'}
                                                        onChange={(e) => handleInputChange('infoProjeto', 'abrangenciaEventos', e.target.value)}
                                                        required
                                                    />
                                                    <span className="ml-2">Por Projeto (1 ocorrência por evento)</span>
                                                </label>
                                                <label className="flex items-center">
                                                    <input
                                                        type="radio"
                                                        name="abrangenciaEventos"
                                                        value="Por Núcleo"
                                                        checked={formData.infoProjeto.abrangenciaEventos === 'Por Núcleo'}
                                                        onChange={(e) => handleInputChange('infoProjeto', 'abrangenciaEventos', e.target.value)}
                                                    />
                                                    <span className="ml-2">Por Núcleo (multiplicado pelo número de núcleos)</span>
                                                </label>
                                            </div>
                                        </label>
                                        <p className="italic text-gray-600">
                                            <strong>Evento de Abertura:</strong> Apresentará o projeto à comunidade local, reforçando sua relevância para o desenvolvimento social e esportivo, promovendo valores como inclusão social, saúde e cidadania. Inclui:
                                        </p>
                                        <ul className="list-disc pl-5">
                                            <li>Divulgação ampla: Informar à comunidade sobre o projeto e como participar.</li>
                                            <li>Educação e conscientização: Sensibilizar sobre temas relacionados ao esporte.</li>
                                            <li>Fortalecimento da autoestima comunitária: Mostrar que a comunidade é capaz de sustentar um projeto transformador.</li>
                                        </ul>
                                        <p className="italic text-gray-600">
                                            <strong>Evento de Encerramento:</strong> Comemorará o término do projeto com competições/torneios, cerimônia de premiação e demonstrações de habilidades. Todos os participantes receberão medalhas, e os três melhores colocados receberão troféus.
                                        </p>
                                    </div>
                                </fieldset>

                               <fieldset className="border p-4 rounded">
                                <legend className="text-blue-900 font-bold">3.6 Grade Horária das Atividades</legend>
                                <p className="italic text-gray-600">
                                    O(s) núcleo(s) do projeto ofertará(ão), no mínimo, 20 horas semanais de atividades, com 16 horas de atendimento e 4 horas de planejamento, para atender os {formData.dadosProjeto.publicoDireto || 'XX'} beneficiários.
                                </p>
                                <div className="space-y-4">
                                    {formData.infoProjeto.gradeHoraria.map((row, index) => (
                                        <div key={index} className="border p-4 rounded">
                                            <h4 className="font-bold">Núcleo {index + 1}</h4>
                                            <label className="block">
                                                Localidade:
                                                <input
                                                    type="text"
                                                    className="w-full p-2 border rounded"
                                                    value={row.nucleoLocalidade}
                                                    onChange={(e) => handleInputChange('infoProjeto', 'gradeHoraria', e.target.value, index, 'nucleoLocalidade')}
                                                />
                                            </label>
                                            <label className="block">
                                                Modalidades:
                                                <input
                                                    type="text"
                                                    className="w-full p-2 border rounded"
                                                    value={row.modalidadesNucleo}
                                                    onChange={(e) => handleInputChange('infoProjeto', 'gradeHoraria', e.target.value, index, 'modalidadesNucleo')}
                                                />
                                            </label>
                                            <label className="block">
                                                Recursos Humanos:
                                                <input
                                                    type="text"
                                                    className="w-full p-2 border rounded"
                                                    value={row.rhNucleo}
                                                    onChange={(e) => handleInputChange('infoProjeto', 'gradeHoraria', e.target.value, index, 'rhNucleo')}
                                                />
                                            </label>
                                            <label className="block">
                                                Informações do Núcleo:
                                                <textarea
                                                    className="w-full p-2 border rounded"
                                                    value={row.infoNucleo}
                                                    onChange={(e) => handleInputChange('infoProjeto', 'gradeHoraria', e.target.value, index, 'infoNucleo')}
                                                    rows="3"
                                                />
                                            </label>
                                            <label className="block">
                                                Grade Horária:
                                                <textarea
                                                    className="w-full p-2 border rounded"
                                                    placeholder="Ex.: 3 vezes na semana, 1h30 cada aula, 4h planejamento, 20h semanais por professor"
                                                    value={row.gradeHorariaDescricao || ''}
                                                    onChange={(e) => handleInputChange('infoProjeto', 'gradeHoraria', e.target.value, index, 'gradeHorariaDescricao')}
                                                    rows="3"
                                                />
                                            </label>
                                            {formData.infoProjeto.gradeHoraria.length > 1 && (
                                                <button
                                                    type="button"
                                                    className="bg-red-500 text-white px-2 py-1 rounded mt-2"
                                                    onClick={() => removeItem('infoProjeto', 'gradeHoraria', index)}
                                                >
                                                    Remover Núcleo
                                                </button>
                                            )}
                                        </div>
                                    ))}
                                    <button
                                        type="button"
                                        className="bg-green-500 text-white px-4 py-2 rounded"
                                        onClick={() => addItem('infoProjeto', 'gradeHoraria')}
                                    >
                                        Adicionar Núcleo
                                    </button>
                                </div>
                            </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.9 Recursos Humanos</legend>
                                    
                                    {/* Novo campo fora da lista de recursos */}
                                    <div className="mb-4">
                                        <label className="block w-32">
                                        Tipo:
                                        <select
                                            className="w-full p-2 border rounded"
                                            value={formData.infoProjeto.tipoRH}
                                            onChange={(e) => handleInputChange('infoProjeto', null, e.target.value, null, 'tipoRH')}
                                        >
                                            <option value="">Selecione</option>
                                            <option value="Contratados">Contratados</option>
                                            <option value="Cedidos">Cedidos</option>
                                        </select>
                                        </label>
                                    </div>

                                    <div className="space-y-4">
                                        {formData.infoProjeto.recursosHumanos.map((row, index) => (
                                        <div key={index} className="flex flex-wrap gap-2 items-center">
                                            <label className="block flex-1 min-w-[200px]">
                                            Função:
                                            <input
                                                type="text"
                                                className="w-full p-2 border rounded"
                                                value={row.funcaoRH}
                                                onChange={(e) =>
                                                handleInputChange('infoProjeto', 'recursosHumanos', e.target.value, index, 'funcaoRH')
                                                }
                                            />
                                            </label>
                                            <label className="block w-20">
                                            Quantidade:
                                            <input
                                                type="number"
                                                className="w-full p-2 border rounded"
                                                value={row.quantidadeRH}
                                                onChange={(e) =>
                                                handleInputChange('infoProjeto', 'recursosHumanos', e.target.value, index, 'quantidadeRH')
                                                }
                                                min="1"
                                            />
                                            </label>
                                            <label className="block flex-1 min-w-[200px]">
                                            Atribuição:
                                            <input
                                                type="text"
                                                className="w-full p-2 border rounded"
                                                value={row.atribuicaoRH}
                                                onChange={(e) =>
                                                handleInputChange('infoProjeto', 'recursosHumanos', e.target.value, index, 'atribuicaoRH')
                                                }
                                            />
                                            </label>
                                            <label className="block w-32">
                                            Carga Horária:
                                            <input
                                                type="text"
                                                className="w-full p-2 border rounded"
                                                value={row.cargaHorariaRH}
                                                onChange={(e) =>
                                                handleInputChange('infoProjeto', 'recursosHumanos', e.target.value, index, 'cargaHorariaRH')
                                                }
                                            />
                                            </label>
                                            <label className="block w-32">
                                            Período:
                                            <input
                                                type="text"
                                                className="w-full p-2 border rounded"
                                                value={row.periodoRH}
                                                onChange={(e) =>
                                                handleInputChange('infoProjeto', 'recursosHumanos', e.target.value, index, 'periodoRH')
                                                }
                                            />
                                            </label>
                                            {formData.infoProjeto.recursosHumanos.length > 1 && (
                                            <button
                                                type="button"
                                                className="bg-red-500 text-white px-2 py-1 rounded"
                                                onClick={() => removeItem('infoProjeto', 'recursosHumanos', index)}
                                            >
                                                <i className="fas fa-trash"></i>
                                            </button>
                                            )}
                                        </div>
                                        ))}
                                        <button
                                        type="button"
                                        className="bg-green-500 text-white px-4 py-2 rounded"
                                        onClick={() => addItem('infoProjeto', 'recursosHumanos')}
                                        >
                                        Adicionar Recurso Humano
                                        </button>
                                    </div>
                                    </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.10 Materiais Fornecidos</legend>
                                    <div className="space-y-4">
                                        {formData.infoProjeto.materiais.map((row, index) => (
                                            <div key={index} className="flex flex-wrap gap-2 items-center">
                                                <label className="block flex-1 min-w-[150px]">
                                                    Modalidade:
                                                    <input
                                                        type="text"
                                                        className="w-full p-2 border rounded"
                                                        value={row.modalidadeMaterial}
                                                        onChange={(e) => handleInputChange('infoProjeto', 'materiais', e.target.value, index, 'modalidadeMaterial')}
                                                    />
                                                </label>
                                                <label className="block flex-1 min-w-[150px]">
                                                    Material:
                                                    <input
                                                        type="text"
                                                        className="w-full p-2 border rounded"
                                                        value={row.material}
                                                        onChange={(e) => handleInputChange('infoProjeto', 'materiais', e.target.value, index, 'material')}
                                                    />
                                                </label>
                                                <label className="block w-32">
                                                    Aquisição/Locação:
                                                    <select
                                                        className="w-full p-2 border rounded"
                                                        value={row.tipoAquisicao}
                                                        onChange={(e) => handleInputChange('infoProjeto', 'materiais', e.target.value, index, 'tipoAquisicao')}
                                                    >
                                                        <option value="Aquisição">Aquisição</option>
                                                        <option value="Locação">Locação</option>
                                                    </select>
                                                </label>
                                                <label className="block flex-1 min-w-[200px]">
                                                    Especificação:
                                                    <input
                                                        type="text"
                                                        className="w-full p-2 border rounded"
                                                        value={row.especificacaoMaterial}
                                                        onChange={(e) => handleInputChange('infoProjeto', 'materiais', e.target.value, index, 'especificacaoMaterial')}
                                                    />
                                                </label>
                                                <label className="block flex-1 min-w-[200px]">
                                                    Justificativa:
                                                    <input
                                                        type="text"
                                                        className="w-full p-2 border rounded"
                                                        value={row.justificativaMaterial}
                                                        onChange={(e) => handleInputChange('infoProjeto', 'materiais', e.target.value, index, 'justificativaMaterial')}
                                                    />
                                                </label>
                                                {formData.infoProjeto.materiais.length > 1 && (
                                                    <button
                                                        type="button"
                                                        className="bg-red-500 text-white px-2 py-1 rounded"
                                                        onClick={() => removeItem('infoProjeto', 'materiais', index)}
                                                    >
                                                        <i className="fas fa-trash"></i>
                                                    </button>
                                                )}
                                            </div>
                                        ))}
                                        <button
                                            type="button"
                                            className="bg-green-500 text-white px-4 py-2 rounded"
                                            onClick={() => addItem('infoProjeto', 'materiais')}
                                        >
                                            Adicionar Material
                                        </button>
                                    </div>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.11 Uniformes</legend>
                                    <div className="space-y-4">
                                        <label className="block">
                                            <span className="text-red-500">*</span> Cada aluno receberá quantos uniformes?
                                            <input
                                                type="number"
                                                className="w-full p-2 border rounded"
                                                value={formData.infoProjeto.quantidadeConjuntosUniforme}
                                                onChange={(e) => handleInputChange('infoProjeto', 'quantidadeConjuntosUniforme', e.target.value)}
                                                min="1"
                                                required
                                            />
                                        </label>
                                        {/* Resto do código da seção de uniformes permanece igual */}
                                        {formData.infoProjeto.uniformes.map((row, index) => (
                                            <div key={index} className="flex flex-wrap gap-2 items-center">
                                                <label className="block flex-1 min-w-[150px]">
                                                    Modalidade:
                                                    <input
                                                        type="text"
                                                        className="w-full p-2 border rounded"
                                                        value={row.modalidadeUniforme}
                                                        onChange={(e) => handleInputChange('infoProjeto', 'uniformes', e.target.value, index, 'modalidadeUniforme')}
                                                    />
                                                </label>
                                                <label className="block flex-1 min-w-[150px]">
                                                    Item:
                                                    <input
                                                        type="text"
                                                        className="w-full p-2 border rounded"
                                                        value={row.itemUniforme}
                                                        onChange={(e) => handleInputChange('infoProjeto', 'uniformes', e.target.value, index, 'itemUniforme')}
                                                    />
                                                </label>
                                                <label className="block flex-1 min-w-[300px]">
                                                    Especificação:
                                                    <input
                                                        type="text"
                                                        className="w-full p-2 border rounded"
                                                        value={row.especificacaoUniforme}
                                                        onChange={(e) => handleInputChange('infoProjeto', 'uniformes', e.target.value, index, 'especificacaoUniforme')}
                                                    />
                                                </label>
                                                {formData.infoProjeto.uniformes.length > 1 && (
                                                    <button
                                                        type="button"
                                                        className="bg-red-500 text-white px-2 py-1 rounded"
                                                        onClick={() => removeItem('infoProjeto', 'uniformes', index)}
                                                    >
                                                        <i className="fas fa-trash"></i>
                                                    </button>
                                                )}
                                            </div>
                                        ))}
                                        <button
                                            type="button"
                                            className="bg-green-500 text-white px-4 py-2 rounded"
                                            onClick={() => addItem('infoProjeto', 'uniformes')}
                                        >
                                            Adicionar Uniforme
                                        </button>
                                    </div>
                                </fieldset>

                                                              <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">3.3 Identificação do Projeto</legend>
                                    <div className="space-y-4">
                                        <p className="italic text-gray-600">Em relação à divulgação do projeto, fundamenta-se como elemento primordial.</p>
                                        <label className="block">
                                            Marque as opções aplicáveis:
                                            <div className="flex flex-wrap gap-4">
                                                {['Faixas', 'Banners', 'Placa', 'Outros'].map(opt => (
                                                    <label key={opt} className="flex items-center">
                                                        <input
                                                            type="checkbox"
                                                            value={opt}
                                                            checked={formData.infoProjeto.identificacao.includes(opt)}
                                                            onChange={(e) => {
                                                                const updatedIdentificacao = e.target.checked
                                                                    ? [...formData.infoProjeto.identificacao, e.target.value]
                                                                    : formData.infoProjeto.identificacao.filter(item => item !== e.target.value);
                                                                handleInputChange('infoProjeto', 'identificacao', updatedIdentificacao);
                                                            }}
                                                        />
                                                        <span className="ml-2">{opt}</span>
                                                    </label>
                                                ))}
                                            </div>
                                        </label>
                                        {formData.infoProjeto.identificacao.includes('Outros') && (
                                            <label className="block">
                                                Especifique:
                                                <input
                                                    type="text"
                                                    className="w-full p-2 border rounded"
                                                    value={formData.infoProjeto.outrosIdentificacao}
                                                    onChange={(e) => handleInputChange('infoProjeto', 'outrosIdentificacao', e.target.value)}
                                                />
                                            </label>
                                        )}
                                    </div>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                <legend className="text-blue-900 font-bold">3.13 Divulgação do Projeto </legend>
                                <div className="space-y-4">
                                    <p>Será realizada de forma ampla e irrestrita. O objetivo é dar publicidade aos distintos públicos sobre as ações e o
                                        retorno dos resultados das intervenções públicas junto à sociedade.
                                        Além de informações de interesse do público-alvo e de ações de relevância social, a divulgação apresenta resultados
                                        que, a partir do desenvolvimento de estratégias de comunicação, são passíveis de aumentar a consciência do cidadão
                                        comum sobre o papel e a importância dos projetos sociais no seu cotidiano. Portanto, deve-se fazer uso dos diversos
                                        meios de comunicação e mídia.</p>
                                    <label className="block">
                                        Marque as opções aplicáveis:
                                        <div className="flex flex-wrap gap-4">
                                            {['Carros ou bicicletas de som', 'Cartazes', 'Faixas', 'Banners', 'Jornais', 'Panfletos', 'Folder', 'Mídia (rádio e televisão)', 'Internet', 'Outros'].map(opt => (
                                                <label key={opt} className="flex items-center">
                                                    <input
                                                        type="checkbox"
                                                        value={opt}
                                                        checked={formData.infoProjeto.divulgacao.includes(opt)}
                                                        onChange={(e) => {
                                                            const updatedDivulgacao = e.target.checked
                                                                ? [...formData.infoProjeto.divulgacao, e.target.value]
                                                                : formData.infoProjeto.divulgacao.filter(item => item !== e.target.value);
                                                            // Clear outrosDivulgacao if unchecking "Outros"
                                                            if (e.target.value === 'Outros' && !e.target.checked) {
                                                                handleInputChange('infoProjeto', 'outrosDivulgacao', '');
                                                            }
                                                            handleInputChange('infoProjeto', 'divulgacao', updatedDivulgacao);
                                                        }}
                                                    />
                                                    <span className="ml-2">{opt}</span>
                                                </label>
                                            ))}
                                        </div>
                                    </label>
                                    {formData.infoProjeto.divulgacao.includes('Outros') && (
                                        <label className="block">
                                            Especifique:
                                            <input
                                                type="text"
                                                className="w-full p-2 border rounded"
                                                value={formData.infoProjeto.outrosDivulgacao || ''}
                                                onChange={(e) => handleInputChange('infoProjeto', 'outrosDivulgacao', e.target.value)}
                                            />
                                        </label>
                                    )}
                                   <label className="block">
                                        <span className="text-red-500">*</span> Forma de custeio da divulgação:
                                        <div className="flex flex-col gap-4 mt-2">
                                            <label className="flex items-center">
                                                <input
                                                    type="checkbox"
                                                    value="Recursos da Emenda Parlamentar"
                                                    checked={formData.infoProjeto?.custeioDivulgacao?.includes('Recursos da Emenda Parlamentar') || false}
                                                    onChange={(e) => {
                                                        const updatedCusteio = e.target.checked
                                                            ? [...(formData.infoProjeto?.custeioDivulgacao || []), e.target.value]
                                                            : (formData.infoProjeto?.custeioDivulgacao || []).filter(item => item !== e.target.value);
                                                        handleInputChange('infoProjeto', 'custeioDivulgacao', updatedCusteio);
                                                    }}
                                                />
                                                <span className="ml-2">Recursos da Emenda Parlamentar</span>
                                            </label>
                                            <label className="flex items-center">
                                                <input
                                                    type="checkbox"
                                                    value="Outros Recursos"
                                                    checked={formData.infoProjeto?.custeioDivulgacao?.includes('Outros Recursos') || false}
                                                    onChange={(e) => {
                                                        const updatedCusteio = e.target.checked
                                                            ? [...(formData.infoProjeto?.custeioDivulgacao || []), e.target.value]
                                                            : (formData.infoProjeto?.custeioDivulgacao || []).filter(item => item !== e.target.value);
                                                        handleInputChange('infoProjeto', 'custeioDivulgacao', updatedCusteio);
                                                    }}
                                                />
                                                <span className="ml-2">Outros Recursos</span>
                                            </label>
                                        </div>
                                    </label>
                                </div>
                            </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">4. Acompanhamento e Monitoramento das Atividades</legend>
                                    <div className="space-y-4">
                                        <label className="block">
                                            Descreva o acompanhamento e monitoramento:
                                            <textarea
                                                className="w-full p-2 border rounded"
                                                value={formData.infoProjeto.acompanhamento}
                                                onChange={(e) => handleInputChange('infoProjeto', 'acompanhamento', e.target.value)}
                                                rows="6"
                                                readOnly
                                            />
                                        </label>
                                    </div>
                                </fieldset>

                                <fieldset className="border p-4 rounded">
                                    <legend className="text-blue-900 font-bold">5. Conclusão</legend>
                                    <div className="space-y-4">
                                        <label className="block">
                                            Conclusão do Projeto:
                                            <textarea
                                                className="w-full p-2 border rounded"
                                                value={formData.infoProjeto.conclusao}
                                                onChange={(e) => handleInputChange('infoProjeto', 'conclusao', e.target.value)}
                                                rows="6"
                                                readOnly
                                            />
                                        </label>
                                    </div>
                                </fieldset>

                                <div className="flex gap-4">
                                    <button
                                        className="bg-blue-900 text-white px-4 py-2 rounded hover:bg-blue-800"
                                        onClick={() => saveForm('infoProjeto')}
                                    >
                                        Salvar
                                    </button>
                                    <button
                                        className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                                        onClick={() => {
                                            setFormData(prev => ({
                                                ...prev,
                                                infoProjeto: {
                                                    tipoNucleo: '',
                                                    identificacao: [],
                                                    outrosIdentificacao: '',
                                                    divulgacao: [],
                                                    custeioDivulgacao: [],
                                                    outrosDivulgacao: '',
                                                    custeioDivulgacao: '',
                                                    gradeHoraria: [{
                                                        nucleoLocalidade: '',
                                                        modalidadesNucleo: '',
                                                        rhNucleo: '',
                                                        infoNucleo: '',
                                                        gradeHorariaDescricao: ''
                                                    }],
                                                    recursosHumanos: [{
                                                        funcaoRH: '',
                                                        quantidadeRH: '',
                                                        atribuicaoRH: '',
                                                        cargaHorariaRH: '',
                                                        periodoRH: ''
                                                    }],
                                                    materiais: [{
                                                        modalidadeMaterial: '',
                                                        material: '',
                                                        tipoAquisicao: 'Aquisição',
                                                        especificacaoMaterial: '',
                                                        justificativaMaterial: ''
                                                    }],
                                                    uniformes: [{
                                                        modalidadeUniforme: '',
                                                        itemUniforme: '',
                                                        especificacaoUniforme: ''
                                                    }],
                                                    eventosSelecionados: [],
                                                    abrangenciaEventos: '',
                                                    detalhamentoModalidades: 'Espaço destinado para a Entidade relatar detalhes específicos sobre as modalidades que serão oferecidas neste projeto, visando conectar o projeto à realidade da Instituição e dos objetivos que se pretende alcançar, tais como: desenvolvimento, características, habilidades, materiais, estrutura, vantagens, benefícios, etc.',
                                                    acompanhamento: 'As aulas ministradas serão registradas em Planos de Aula aprovados pela coordenação geral, registros fotográficos, relatórios emitidos pelo educador/instrutor. Tendo em vista a intencionalidade pedagógica da prática desportiva neste Projeto Técnico. Será emitido parecer, trimestralmente, dos profissionais que acompanharão as turmas sobre a evolução de aspectos pedagógicos e sociais, além de interação social e compreensão da importância de práticas esportivas para a saúde.',
                                                    conclusao: 'O Projeto busca não apenas o desenvolvimento atlético, mas também o crescimento pessoal e social dos participantes. Ao utilizar o esporte como ferramenta, o projeto contribui para um futuro mais justo e cheio de oportunidades, proporcionando aos beneficiários em situação de vulnerabilidade uma chance de transformar suas vidas.'
                                                }
                                            }));
                                            localStorage.removeItem('formData');
                                            alert('Formulário limpo com sucesso!');
                                        }}
                                    >
                                        Limpar
                                    </button>
                                </div>
                            </div>
                        )}

                        <div className="mt-6">
                           <button
                    className={`px-4 py-2 rounded w-full ${formularioValido ? 'bg-blue-900 text-white hover:bg-blue-800' : 'bg-gray-400 text-white cursor-not-allowed'}`}
                    onClick={generatePDF}
                    disabled={!formularioValido}
                >
                    Gerar Projeto Técnico
                </button>
                        </div>
                        
                    </main>

                    <footer className="bg-blue-900 text-white p-4 text-center">
                        <p>© 2025 Ministério do Esporte. Todos os direitos reservados.</p>
                    </footer>
                </div>
            );
        };
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App />);
    </script>
</body>
</html>